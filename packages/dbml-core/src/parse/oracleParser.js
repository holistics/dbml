/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

var _ = require("lodash"), pluralize = require("pluralize");

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleFunctions = { parser: peg$parseparser },
      peg$startRuleFunction  = peg$parseparser,

      peg$c0 = function(commands) {
      	commands.forEach((cmd) => {
      		const { command_name, value: { syntax_name, value }, warning } = cmd;
      		switch(command_name.toLowerCase()){
      			case "create_table":
      				const table = value;
      				switch(syntax_name.toLowerCase()) {
      					case "create_table_normal":
      						tables.push(table);

      						const pkList = [];

      						table.fields.forEach(field => {
      							// process inline_refs
      							if (field.inline_refs) {
      								refs.push(...field.inline_refs.map(ref => {
      									return {
      										name: ref.name,
      										endpoints: [
      											{
      												tableName: table.name,
      												schemaName: table.schemaName,
      												fieldNames: [field.name],
      												relation: "*",
      											},
      											ref.endpoint
      										],
      										onDelete: ref.onDelete,
      										onUpdate: ref.onUpdate
      									}
      								}));
      							}

      							// process composite primary key, if primary key is in composite form, push it into indexes
      							if (field.pk) {
      								pkList.push(field);
      							}
      						});

      						if (pkList.length > 1) {
      							table.fields = table.fields.map((field) => {
      								delete field.pk
      								return field;
      							});

      							const index = {
      								columns: pkList.map(field => ({
      									value: field.name,
      									type: 'column'
      								})),
      								pk: true
      							};

      							if (table.indexes) {
      								table.indexes.push(index);
      							} else {
      								table.indexes = [index];
      							}
      						}
      						break;
      					case "create_table_of":
      						break;
      					case "create_table_partition_of":
      						break;
      				}
      				break;
      			case "create_index":
      				const { table_name } = value;
      				delete value.table_name; // remove table_name from column
              const table_index = findTable(table_name.schemaName, table_name.name);
      				if (table_index.indexes) {
      					table_index.indexes.push(value);
      				} else {
      					table_index.indexes = [value];
      				}
      				break;
      			case "create_type":
      				switch(syntax_name.toLowerCase()) {
      					case "create_type_enum":
      						enums.push(value);
      						break;
      					case "create_type_range":
      						break;
      				}
      				break;
      			case "alter_table":
      				switch(syntax_name.toLowerCase()) {
      					case "alter_table_action":
      						value.forEach(v => {
      							const { type } = v;
      							switch(type.toLowerCase()) {
      								case "fk":
      									v.t_value.forEach(endpoints => {
      										refs.push(endpoints);
      									})
      							}
      						})
      						break;
      				}
      				break;
      			case "comment":
      				switch(syntax_name.toLowerCase()) {
      					case "column": {
      						const { schemaName, tableName, columnName } = value;
      						const foundTable = findTable(schemaName, tableName);
      						if (foundTable) {
      							const foundField = findField(foundTable, columnName);
      							if (foundField) foundField.note = value.text ? { value: value.text } : null;
      						}
      						break;
      					}
      					case "table":	{
      						const { schemaName, name: tableName } = value.table_name;
      						const foundTable = findTable(schemaName, tableName);
      						if (foundTable) foundTable.note = value.text ? { value: value.text } : null;
      						break;
      					}
      				}
      				break;
      			case "ignore_syntax":
      				// warnings.push(warning);
      				break;
      		}
      	})

      	return {tables, refs, enums};
      },
      peg$c1 = "create",
      peg$c2 = peg$literalExpectation("CREATE", true),
      peg$c3 = "alter",
      peg$c4 = peg$literalExpectation("ALTER", true),
      peg$c5 = "unique",
      peg$c6 = peg$literalExpectation("UNIQUE", true),
      peg$c7 = "index",
      peg$c8 = peg$literalExpectation("INDEX", true),
      peg$c9 = "type",
      peg$c10 = peg$literalExpectation("TYPE", true),
      peg$c11 = "foreign",
      peg$c12 = peg$literalExpectation("FOREIGN", true),
      peg$c13 = "key",
      peg$c14 = peg$literalExpectation("KEY", true),
      peg$c15 = "references",
      peg$c16 = peg$literalExpectation("REFERENCES", true),
      peg$c17 = "on",
      peg$c18 = peg$literalExpectation("ON", true),
      peg$c19 = "using",
      peg$c20 = peg$literalExpectation("USING", true),
      peg$c21 = "table",
      peg$c22 = peg$literalExpectation("TABLE", true),
      peg$c23 = "if",
      peg$c24 = peg$literalExpectation("IF", true),
      peg$c25 = "not",
      peg$c26 = peg$literalExpectation("NOT", true),
      peg$c27 = "exists",
      peg$c28 = peg$literalExpectation("EXISTS", true),
      peg$c29 = "global",
      peg$c30 = peg$literalExpectation("GLOBAL", true),
      peg$c31 = "private",
      peg$c32 = peg$literalExpectation("PRIVATE", true),
      peg$c33 = "sharded",
      peg$c34 = peg$literalExpectation("SHARDED", true),
      peg$c35 = "duplicated",
      peg$c36 = peg$literalExpectation("DUPLICATED", true),
      peg$c37 = "immutable",
      peg$c38 = peg$literalExpectation("IMMUTABLE", true),
      peg$c39 = "immutable blockchain",
      peg$c40 = peg$literalExpectation("IMMUTABLE BLOCKCHAIN", true),
      peg$c41 = "segment",
      peg$c42 = peg$literalExpectation("SEGMENT", true),
      peg$c43 = "creation",
      peg$c44 = peg$literalExpectation("CREATION", true),
      peg$c45 = "immediate",
      peg$c46 = peg$literalExpectation("IMMEDIATE", true),
      peg$c47 = "deferred",
      peg$c48 = peg$literalExpectation("DEFERRED", true),
      peg$c49 = "pctfree",
      peg$c50 = peg$literalExpectation("PCTFREE", true),
      peg$c51 = "pctused",
      peg$c52 = peg$literalExpectation("PCTUSED", true),
      peg$c53 = "initrans",
      peg$c54 = peg$literalExpectation("INITRANS", true),
      peg$c55 = "maxtrans",
      peg$c56 = peg$literalExpectation("MAXTRANS", true),
      peg$c57 = "COMPRESS",
      peg$c58 = peg$literalExpectation("COMPRESS", false),
      peg$c59 = "nocompress",
      peg$c60 = peg$literalExpectation("NOCOMPRESS", true),
      peg$c61 = "logging",
      peg$c62 = peg$literalExpectation("LOGGING", true),
      peg$c63 = "initial",
      peg$c64 = peg$literalExpectation("INITIAL", true),
      peg$c65 = "next",
      peg$c66 = peg$literalExpectation("NEXT", true),
      peg$c67 = "bitmap",
      peg$c68 = peg$literalExpectation("BITMAP", true),
      peg$c69 = "multivalue",
      peg$c70 = peg$literalExpectation("MULTIVALUE", true),
      peg$c71 = "minextents",
      peg$c72 = peg$literalExpectation("MINEXTENTS", true),
      peg$c73 = "maxextents",
      peg$c74 = peg$literalExpectation("MAXEXTENTS", true),
      peg$c75 = "unlimited",
      peg$c76 = peg$literalExpectation("UNLIMITED", true),
      peg$c77 = "pctincrease",
      peg$c78 = peg$literalExpectation("PCTINCREASE", true),
      peg$c79 = "freelists",
      peg$c80 = peg$literalExpectation("FREELISTS", true),
      peg$c81 = "freelist",
      peg$c82 = peg$literalExpectation("FREELIST", true),
      peg$c83 = "groups",
      peg$c84 = peg$literalExpectation("GROUPS", true),
      peg$c85 = "optimal",
      peg$c86 = peg$literalExpectation("OPTIMAL", true),
      peg$c87 = "buffer_pool",
      peg$c88 = peg$literalExpectation("BUFFER_POOL", true),
      peg$c89 = "keep",
      peg$c90 = peg$literalExpectation("KEEP", true),
      peg$c91 = "none",
      peg$c92 = peg$literalExpectation("NONE", true),
      peg$c93 = "recycle",
      peg$c94 = peg$literalExpectation("RECYCLE", true),
      peg$c95 = "flash_cache",
      peg$c96 = peg$literalExpectation("FLASH_CACHE", true),
      peg$c97 = "cell_flash_cache",
      peg$c98 = peg$literalExpectation("CELL_FLASH_CACHE", true),
      peg$c99 = "encrypt",
      peg$c100 = peg$literalExpectation("ENCRYPT", true),
      peg$c101 = "temporary",
      peg$c102 = peg$literalExpectation("TEMPORARY", true),
      peg$c103 = "collation",
      peg$c104 = peg$literalExpectation("COLLATION", true),
      peg$c105 = "partition",
      peg$c106 = peg$literalExpectation("PARTITION", true),
      peg$c107 = "by",
      peg$c108 = peg$literalExpectation("BY", true),
      peg$c109 = "range",
      peg$c110 = peg$literalExpectation("RANGE", true),
      peg$c111 = "list",
      peg$c112 = peg$literalExpectation("LIST", true),
      peg$c113 = "hash",
      peg$c114 = peg$literalExpectation("HASH", true),
      peg$c115 = "like",
      peg$c116 = peg$literalExpectation("LIKE", true),
      peg$c117 = "inherits",
      peg$c118 = peg$literalExpectation("INHERITS", true),
      peg$c119 = "inherit",
      peg$c120 = peg$literalExpectation("INHERIT", true),
      peg$c121 = "with",
      peg$c122 = peg$literalExpectation("WITH", true),
      peg$c123 = "without",
      peg$c124 = peg$literalExpectation("WITHOUT", true),
      peg$c125 = "commit",
      peg$c126 = peg$literalExpectation("COMMIT", true),
      peg$c127 = "rows",
      peg$c128 = peg$literalExpectation("ROWS", true),
      peg$c129 = "delete",
      peg$c130 = peg$literalExpectation("DELETE", true),
      peg$c131 = "drop",
      peg$c132 = peg$literalExpectation("DROP", true),
      peg$c133 = "tablespace",
      peg$c134 = peg$literalExpectation("TABLESPACE", true),
      peg$c135 = "constraint",
      peg$c136 = peg$literalExpectation("CONSTRAINT", true),
      peg$c137 = "no",
      peg$c138 = peg$literalExpectation("NO", true),
      peg$c139 = "null",
      peg$c140 = peg$literalExpectation("NULL", true),
      peg$c141 = "check",
      peg$c142 = peg$literalExpectation("CHECK", true),
      peg$c143 = "default",
      peg$c144 = peg$literalExpectation("DEFAULT", true),
      peg$c145 = "primary",
      peg$c146 = peg$literalExpectation("PRIMARY", true),
      peg$c147 = "match",
      peg$c148 = peg$literalExpectation("MATCH", true),
      peg$c149 = "full",
      peg$c150 = peg$literalExpectation("FULL", true),
      peg$c151 = "partial",
      peg$c152 = peg$literalExpectation("PARTIAL", true),
      peg$c153 = "simple",
      peg$c154 = peg$literalExpectation("SIMPLE", true),
      peg$c155 = "update",
      peg$c156 = peg$literalExpectation("UPDATE", true),
      peg$c157 = "deferrable",
      peg$c158 = peg$literalExpectation("DEFERRABLE", true),
      peg$c159 = "initially",
      peg$c160 = peg$literalExpectation("INITIALLY", true),
      peg$c161 = "exclude",
      peg$c162 = peg$literalExpectation("EXCLUDE", true),
      peg$c163 = "where",
      peg$c164 = peg$literalExpectation("WHERE", true),
      peg$c165 = "including",
      peg$c166 = peg$literalExpectation("INCLUDING", true),
      peg$c167 = "excluding",
      peg$c168 = peg$literalExpectation("EXCLUDING", true),
      peg$c169 = "comments",
      peg$c170 = peg$literalExpectation("COMMENTS", true),
      peg$c171 = "constraints",
      peg$c172 = peg$literalExpectation("CONSTRAINTS", true),
      peg$c173 = "generated",
      peg$c174 = peg$literalExpectation("GENERATED", true),
      peg$c175 = "always",
      peg$c176 = peg$literalExpectation("ALWAYS", true),
      peg$c177 = "as",
      peg$c178 = peg$literalExpectation("AS", true),
      peg$c179 = "add",
      peg$c180 = peg$literalExpectation("ADD", true),
      peg$c181 = "only",
      peg$c182 = peg$literalExpectation("ONLY", true),
      peg$c183 = "defaults",
      peg$c184 = peg$literalExpectation("DEFAULTS", true),
      peg$c185 = "identity",
      peg$c186 = peg$literalExpectation("IDENTITY", true),
      peg$c187 = "indexes",
      peg$c188 = peg$literalExpectation("INDEXES", true),
      peg$c189 = "statistics",
      peg$c190 = peg$literalExpectation("STATISTICS", true),
      peg$c191 = "storage",
      peg$c192 = peg$literalExpectation("STORAGE", true),
      peg$c193 = "include",
      peg$c194 = peg$literalExpectation("INCLUDE", true),
      peg$c195 = "includes",
      peg$c196 = peg$literalExpectation("INCLUDES", true),
      peg$c197 = "all",
      peg$c198 = peg$literalExpectation("ALL", true),
      peg$c199 = "of",
      peg$c200 = peg$literalExpectation("OF", true),
      peg$c201 = "options",
      peg$c202 = peg$literalExpectation("OPTIONS", true),
      peg$c203 = "for",
      peg$c204 = peg$literalExpectation("FOR", true),
      peg$c205 = "values",
      peg$c206 = peg$literalExpectation("VALUES", true),
      peg$c207 = "in",
      peg$c208 = peg$literalExpectation("IN", true),
      peg$c209 = "from",
      peg$c210 = peg$literalExpectation("FROM", true),
      peg$c211 = "to",
      peg$c212 = peg$literalExpectation("TO", true),
      peg$c213 = "true",
      peg$c214 = peg$literalExpectation("TRUE", true),
      peg$c215 = "false",
      peg$c216 = peg$literalExpectation("FALSE", true),
      peg$c217 = "valid",
      peg$c218 = peg$literalExpectation("VALID", true),
      peg$c219 = "column",
      peg$c220 = peg$literalExpectation("COLUMN", true),
      peg$c221 = "set",
      peg$c222 = peg$literalExpectation("SET", true),
      peg$c223 = "data",
      peg$c224 = peg$literalExpectation("DATA", true),
      peg$c225 = "reset",
      peg$c226 = peg$literalExpectation("RESET", true),
      peg$c227 = "main",
      peg$c228 = peg$literalExpectation("MAIN", true),
      peg$c229 = "asc",
      peg$c230 = peg$literalExpectation("ASC", true),
      peg$c231 = "desc",
      peg$c232 = peg$literalExpectation("DESC", true),
      peg$c233 = "nulls",
      peg$c234 = peg$literalExpectation("NULLS", true),
      peg$c235 = "first",
      peg$c236 = peg$literalExpectation("FIRST", true),
      peg$c237 = "last",
      peg$c238 = peg$literalExpectation("LAST", true),
      peg$c239 = "comment",
      peg$c240 = peg$literalExpectation("COMMENT", true),
      peg$c241 = "IS",
      peg$c242 = peg$literalExpectation("IS", false),
      peg$c243 = "insert",
      peg$c244 = peg$literalExpectation("INSERT", true),
      peg$c245 = "select",
      peg$c246 = peg$literalExpectation("SELECT", true),
      peg$c247 = "use",
      peg$c248 = peg$literalExpectation("USE", true),
      peg$c249 = "sequence",
      peg$c250 = peg$literalExpectation("SEQUENCE", true),
      peg$c251 = "schema",
      peg$c252 = peg$literalExpectation("SCHEMA", true),
      peg$c253 = "view",
      peg$c254 = peg$literalExpectation("VIEW", true),
      peg$c255 = "rename",
      peg$c256 = peg$literalExpectation("RENAME", true),
      peg$c257 = peg$otherExpectation("expression"),
      peg$c258 = function(factors) {
      	return removeReduntdantSpNewline(_.flattenDeep(factors).join(""));
      },
      peg$c259 = "(",
      peg$c260 = peg$literalExpectation("(", false),
      peg$c261 = ")",
      peg$c262 = peg$literalExpectation(")", false),
      peg$c263 = ",",
      peg$c264 = peg$literalExpectation(",", false),
      peg$c265 = ");",
      peg$c266 = peg$literalExpectation(");", false),
      peg$c267 = peg$anyExpectation(),
      peg$c268 = function(factors) {
      	return _.flattenDeep(factors).join("");
      },
      peg$c269 = /^["',.a-z0-9_+-:<>=!*]/i,
      peg$c270 = peg$classExpectation(["\"", "'", ",", ".", ["a", "z"], ["0", "9"], "_", ["+", ":"], "<", ">", "=", "!", "*"], false, true),
      peg$c271 = /^['.a-z0-9_+\-]/i,
      peg$c272 = peg$classExpectation(["'", ".", ["a", "z"], ["0", "9"], "_", "+", "-"], false, true),
      peg$c273 = peg$otherExpectation("valid column name"),
      peg$c274 = ".",
      peg$c275 = peg$literalExpectation(".", false),
      peg$c276 = function(names) {
        let dbName = null;
        let schemaName = null;
        if (names && names.length > 0) {
          if (names.length === 1) schemaName = names[0][0];
          else {
            dbName = names[0][0];
            schemaName = names[1][0];
          }
        }
        return { dbName, schemaName }
      },
      peg$c277 = peg$otherExpectation("valid table name"),
      peg$c278 = function(pathName, name) {
        return { ...pathName, name }
      },
      peg$c279 = peg$otherExpectation("string"),
      peg$c280 = "'",
      peg$c281 = peg$literalExpectation("'", false),
      peg$c282 = function(c) {
      	return c.join('');
      },
      peg$c283 = "''",
      peg$c284 = peg$literalExpectation("''", false),
      peg$c285 = function() { return "'" },
      peg$c286 = /^[^']/,
      peg$c287 = peg$classExpectation(["'"], true, false),
      peg$c288 = "\"",
      peg$c289 = peg$literalExpectation("\"", false),
      peg$c290 = function(c) {
      		return c.join('');
      	},
      peg$c291 = "\"\"",
      peg$c292 = peg$literalExpectation("\"\"", false),
      peg$c293 = function() { return '"' },
      peg$c294 = /^[^"]/,
      peg$c295 = peg$classExpectation(["\""], true, false),
      peg$c296 = peg$otherExpectation("number"),
      peg$c297 = "e",
      peg$c298 = peg$literalExpectation("e", false),
      peg$c299 = "+",
      peg$c300 = peg$literalExpectation("+", false),
      peg$c301 = "-",
      peg$c302 = peg$literalExpectation("-", false),
      peg$c303 = function(a) {
      		return _.flattenDeep(a).filter(ele => ele).join('');
      	},
      peg$c304 = function(d) { return d.join('') },
      peg$c305 = /^[0-9]/,
      peg$c306 = peg$classExpectation([["0", "9"]], false, false),
      peg$c307 = peg$otherExpectation("VALID TYPE"),
      peg$c308 = "character",
      peg$c309 = peg$literalExpectation("CHARACTER", true),
      peg$c310 = "varying",
      peg$c311 = peg$literalExpectation("VARYING", true),
      peg$c312 = function(c1, c2, args, dimensions) {
        let c = `${c1} ${c2}`;
        c = args ? c + '(' + args[1] + ')' : c;
        return {
          type_name: c + (dimensions ? dimensions.map((dimension) => '[' + dimension + ']').join('') : ''),
          args: args ? args[1] : null
        }
      },
      peg$c313 = "timestamptz",
      peg$c314 = peg$literalExpectation("timestamptz", true),
      peg$c315 = function(number, dimensions) {
          const args = number ? number[2] : null;
          return {
            type_name: (args !== null ? `timestamptz(${args})`: `timestamptz`) + (dimensions ? dimensions.map((dimension) => '[' + dimension + ']').join('') : ''),
            args
          }
        },
      peg$c316 = "timestamp",
      peg$c317 = peg$literalExpectation("timestamp", true),
      peg$c318 = peg$literalExpectation("without", true),
      peg$c319 = peg$literalExpectation("with", true),
      peg$c320 = "time",
      peg$c321 = peg$literalExpectation("time", true),
      peg$c322 = "zone",
      peg$c323 = peg$literalExpectation("zone", true),
      peg$c324 = function(number, dimensions) {
        const args = number ? number[2] : null;
        return {
          type_name: (args !== null ? `timestamp(${args})`: `timestamp`) + (dimensions ? dimensions.map((dimension) => '[' + dimension + ']').join('') : ''),
          args
        }
      },
      peg$c325 = "timetz",
      peg$c326 = peg$literalExpectation("timetz", true),
      peg$c327 = function(number, dimensions) {
          const args = number ? number[2] : null;
          return {
            type_name: (args !== null ? `timetz(${args})`: `timetz`) + (dimensions ? dimensions.map((dimension) => '[' + dimension + ']').join('') : ''),
            args
          }
        },
      peg$c328 = function(number, dimensions) {
        const args = number ? number[2] : null;
        return {
          type_name: (args !== null ? `time(${args})`: `time`) + (dimensions ? dimensions.map((dimension) => '[' + dimension + ']').join('') : ''),
          args
        }
      },
      peg$c329 = function(c, dimensions) {
      	  const args = c.args;
          return {
            type_name: c.type_name + (dimensions ? dimensions.map((dimension) => '[' + dimension + ']').join('') : ''),
            schemaName: c.schemaName,
            args
          };
      	},
      peg$c330 = /^[^"\n]/,
      peg$c331 = peg$classExpectation(["\"", "\n"], true, false),
      peg$c332 = function(c) {
        return {
          type_name: c.join(""),
          args: null
        }
      },
      peg$c333 = function(pathName, c, args) {
      	let type_name = c.join("");
      	args = args ? args[1] : null;
      	if (type_name.toLowerCase() !== 'enum') {
      		type_name = args ? type_name + '(' + args + ')' : type_name;
      	}

      	return {
          ...pathName,
      		type_name,
      		args
      	}
      },
      peg$c334 = "array",
      peg$c335 = peg$literalExpectation("array", true),
      peg$c336 = "[",
      peg$c337 = peg$literalExpectation("[", false),
      peg$c338 = "]",
      peg$c339 = peg$literalExpectation("]", false),
      peg$c340 = function(singledimenson) {
          return [singledimenson ? singledimenson[3] : ''];
      	},
      peg$c341 = function(multidimenson) {
          // this will parse into Array(Array('[', _ , expression , _ ']'))
          return multidimenson.map((dimension) => dimension[2]);
        },
      peg$c342 = function(val) { return { value: val, type: 'string' }},
      peg$c343 = function(val) { return { value: val, type: 'number' }},
      peg$c344 = function(val) { return { value: val, type: 'boolean' }},
      peg$c345 = function(val) {
      		let str = val;
      		if (val && val.length > 2 && val[0] === '(' && val[val.length - 1] === ')') {
      			str = val.slice(1, -1);
      		}
      		return {
      			value: str,
      			type: 'expression'
      		};
      	},
      peg$c346 = " ",
      peg$c347 = peg$literalExpectation(" ", false),
      peg$c348 = "\t",
      peg$c349 = peg$literalExpectation("\t", false),
      peg$c350 = ";",
      peg$c351 = peg$literalExpectation(";", false),
      peg$c352 = peg$otherExpectation("endline"),
      peg$c353 = peg$otherExpectation("newline"),
      peg$c354 = "\r\n",
      peg$c355 = peg$literalExpectation("\r\n", false),
      peg$c356 = "\n",
      peg$c357 = peg$literalExpectation("\n", false),
      peg$c358 = peg$otherExpectation("space"),
      peg$c359 = peg$otherExpectation("comment"),
      peg$c360 = "--",
      peg$c361 = peg$literalExpectation("--", false),
      peg$c362 = /^[^\n]/,
      peg$c363 = peg$classExpectation(["\n"], true, false),
      peg$c364 = "/*",
      peg$c365 = peg$literalExpectation("/*", false),
      peg$c366 = "*/",
      peg$c367 = peg$literalExpectation("*/", false),
      peg$c368 = peg$otherExpectation("letter, number or underscore"),
      peg$c369 = /^[a-z0-9_]/i,
      peg$c370 = peg$classExpectation([["a", "z"], ["0", "9"], "_"], false, true),
      peg$c371 = "&&",
      peg$c372 = peg$literalExpectation("&&", false),
      peg$c373 = "=",
      peg$c374 = peg$literalExpectation("=", false),
      peg$c375 = function(table_name, table_properties) {
      		const table = { name: table_name.name, schemaName: table_name.schemaName, fields: [], indexes: [] }
      		// process table_properties
      		table_properties.forEach(({ table_property_name, value }) => {
      			switch(table_property_name.toLowerCase()) {
      				case "column":
      					// if column contains inline_refs
      					// if(value.inline_refs && value.inline_refs.length > 0) {
      					// 	value.inline_refs.forEach(({ endpoints }) => {
      					// 		endpoints[0].tableName = table_name;
      					// 	})
      					// }
      					table.fields.push(value);
      					break;
      				case "table_constraint":
      					const { type, t_value } = value;
      					switch (type.toLowerCase()) {
      						case "unique": // set property unique for column
      							t_value.forEach(value => {
      								const field = table.fields.find(field => field.name === value);
      								if(field) {
      									field.unique = true;
      								} else {
      									//throw Error(`${table_name}: UNIQUE - Can not find column ${value}.`);
      								}
      							})
      							break;
      						case "pk": // set property pk for column, pk: PRIMARY KEY
      							t_value.forEach(value => {
      								const field = table.fields.find(field => field.name === value);
      								if(field) {
      									field.pk = true;
      								} else {
      									//throw Error(`${table_name}: PRIMARY KEY - Can not find column ${value}.`);
      								}
      							})
      							break;
      						case "fk": // set inline_ref for column
      							t_value.forEach((ref) => {
      								const { fieldNames } = ref.endpoints[0];
      								// set tableName for endpoints[0];
      								// endpoints[0].tableName = table_name;
      								const field = table.fields.find(field => field.name === fieldNames[0]);
      								if(!field) {
      									//throw Error(`${table_name}: FOREIGN KEY - Can not find column ${fieldNames}`);
      								}
      								if(!field.inline_refs) {
      									field.inline_refs = [];
      								}
      								field.inline_refs.push({
      									name: ref.name,
      									endpoint: ref.endpoints[1],
      									onDelete: ref.onDelete,
      									onUpdate: ref.onUpdate
      								});
      							})
      							break;
      					}
      					break;
      				case "like":
      					break;
      			}
      		})
      		return {
      			syntax_name: "create_table_normal",
      			value: table
      		}
      	},
      peg$c376 = function(digits) {
          return parseInt(digits.join(''));
      },
      peg$c377 = function(first, rest) {
      	return [first, ...rest.map(r => r[3])];
      },
      peg$c378 = function(table_constraint) {
      		return {
      			table_property_name: "table_constraint",
      			value: table_constraint
      		}
      	},
      peg$c379 = function(source_table) {
      		return {
      			table_property_name: "like",
      			value: source_table
      		}
      	},
      peg$c380 = function(column_name, data_type, column_constraints) {
      		const column = { name: column_name , type: data_type};
      		const columnTypeName = column.type.type_name.toLowerCase();
      		const serialIncrementType = new Set(['serial', 'smallserial', 'bigserial']);
      		// process type for increment
      		if (serialIncrementType.has(columnTypeName)) {
      			column.increment = true;
      		}
      		// map from grammar to right object
      		column_constraints = column_constraints.map(c => c[1]);
      		// process column_constraints
      		column_constraints.forEach(({ type, value }) => {
      			switch(type.toLowerCase()) {
      				case "not_null":
      					column.not_null = value;
      					break;
      				case "increment":
      					column.increment = true;
      					break;
      				case "dbdefault":
      					column.dbdefault = value;
      					break;
      				case "unique":
      					column.unique = true;
      					break;
      				case "pk":
      					column.pk  = true;
      					break;
      				case "fk":
      					if (!column.inline_refs) {
      						column.inline_refs = [];
      					}
      					column.inline_refs.push(value);
      					break;
      			}
      		})
      		return {
      			table_property_name: "column",
      			value: column
      		}
      	},
      peg$c381 = function(constraint_name) { return constraint_name },
      peg$c382 = function(constraint_name) { return { type: "not_null" , value: true } },
      peg$c383 = function(constraint_name) { return { type: "not_null" , value: false } },
      peg$c384 = function(constraint_name) { return { type: "not_supported" } },
      peg$c385 = function(constraint_name, default_expr) { return { type: "dbdefault", value: default_expr } },
      peg$c386 = function(constraint_name) { return { type: "increment" } },
      peg$c387 = function(constraint_name) { return { type: "unique" } },
      peg$c388 = function(constraint_name) { return { type: "pk" } },
      peg$c389 = function(constraint_name, reftable, refcolumn) {return refcolumn},
      peg$c390 = function(constraint_name, reftable, refcolumn, fk_actions) {
      			let ref_actions = {};

      			fk_actions.forEach(fkAction => {
      				if (fkAction.type === 'delete') {
      						ref_actions.onDelete = fkAction.action;
      						return;
      					}
      					ref_actions.onUpdate = fkAction.action;
      			});

      			return {
      				type: "fk",
      				value: {
      					name: constraint_name,
      					endpoint: {
      						tableName: reftable.name,
                  schemaName: reftable.schemaName,
      						fieldNames: refcolumn ? [refcolumn] : null,
      						relation: "1"
      					},
      					...ref_actions
      				}
      			}
      		},
      peg$c391 = function(constraint_name, column_constraint) {
      		return column_constraint;
      	},
      peg$c392 = function(constraint_name) { return { type:"not_supported" } },
      peg$c393 = function(constraint_name, column_names) { return { type: "unique", t_value: column_names } },
      peg$c394 = function(constraint_name, column_names) { return { type: "pk", t_value: column_names } },
      peg$c395 = function(constraint_name, column_names, reftable, refcolumn) {return refcolumn},
      peg$c396 = function(constraint_name, column_names, reftable, refcolumn, fk_actions) {
      			const value = [];
      			if(refcolumn && refcolumn.length > column_names.length) {
      				//throw Error(`Line ${location().start.line}: There are extra ${refcolumn.length - column_names.length} refer column(s) not matched.`);
      			}
      			//if(refcolumn && key >= refcolumn.length) {
      				//throw Error(`Line ${location().start.line}: ${column_name} do not have referenced column.`)
      			//}
      			const v = {
      				name: constraint_name,
      				endpoints: [
      					{
      						tableName: null,
      						fieldNames: column_names,
      						relation: "*",
      					},
      					{
      						tableName: reftable.name,
                  schemaName: reftable.schemaName,
      						fieldNames: refcolumn,// ? refcolumn[key] : null,
      						relation: "1",
      					},
      				],
      			};
      			fk_actions.forEach(fkAction => {
      				if (fkAction.type === 'delete') {
      					v.onDelete = fkAction.action;
      					return;
      				}
      				v.onUpdate = fkAction.action;
      			});
      			value.push(v);
      			return {
      				type: "fk",
      				t_value: value
      			}
      		},
      peg$c397 = function(constraint_name, table_constraint) {
      		return table_constraint
      	},
      peg$c398 = function(type, action) { return { type: type.toLowerCase(), action: action.toLowerCase() } },
      peg$c399 = "restrict",
      peg$c400 = peg$literalExpectation("RESTRICT", true),
      peg$c401 = "cascade",
      peg$c402 = peg$literalExpectation("CASCADE", true),
      peg$c403 = "action",
      peg$c404 = peg$literalExpectation("ACTION", true),
      peg$c405 = "btree",
      peg$c406 = peg$literalExpectation("BTREE", true),
      peg$c407 = "gist",
      peg$c408 = peg$literalExpectation("GIST", true),
      peg$c409 = "gin",
      peg$c410 = peg$literalExpectation("GIN", true),
      peg$c411 = "brin",
      peg$c412 = peg$literalExpectation("BRIN", true),
      peg$c413 = "sp-gist",
      peg$c414 = peg$literalExpectation("SP-GIST", true),
      peg$c415 = function(index_method) {
      	return index_method;
      },
      peg$c416 = function(index_parameters) {
      		return index_parameters;
      	},
      peg$c417 = "fillfactor",
      peg$c418 = peg$literalExpectation("fillfactor", true),
      peg$c419 = "parallel_worlers",
      peg$c420 = peg$literalExpectation("parallel_worlers", true),
      peg$c421 = "autovacuum_enabled",
      peg$c422 = peg$literalExpectation("autovacuum_enabled", true),
      peg$c423 = "toast.autovacuum_enabled",
      peg$c424 = peg$literalExpectation("toast.autovacuum_enabled", true),
      peg$c425 = "autovacuum_vacuum_threshold",
      peg$c426 = peg$literalExpectation("autovacuum_vacuum_threshold", true),
      peg$c427 = "toast.autovacuum_vacuum_threshold",
      peg$c428 = peg$literalExpectation("toast.autovacuum_vacuum_threshold", true),
      peg$c429 = "autovacuum_vacuum_scale_factor",
      peg$c430 = peg$literalExpectation("autovacuum_vacuum_scale_factor", true),
      peg$c431 = "toast.autovacuum_vacuum_scale_factor",
      peg$c432 = peg$literalExpectation("toast.autovacuum_vacuum_scale_factor", true),
      peg$c433 = "autovacuum_analyze_threshold",
      peg$c434 = peg$literalExpectation("autovacuum_analyze_threshold", true),
      peg$c435 = "autovacuum_analyze_scale_factor",
      peg$c436 = peg$literalExpectation("autovacuum_analyze_scale_factor", true),
      peg$c437 = "autovacuum_vacuum_cost_delay",
      peg$c438 = peg$literalExpectation("autovacuum_vacuum_cost_delay", true),
      peg$c439 = "toast.autovacuum_vacuum_cost_delay",
      peg$c440 = peg$literalExpectation("toast.autovacuum_vacuum_cost_delay", true),
      peg$c441 = "autovacuum_vacuum_cost_limit",
      peg$c442 = peg$literalExpectation("autovacuum_vacuum_cost_limit", true),
      peg$c443 = "toast.autovacuum_vacuum_cost_limit",
      peg$c444 = peg$literalExpectation("toast.autovacuum_vacuum_cost_limit", true),
      peg$c445 = "autovacuum_freeze_min_age",
      peg$c446 = peg$literalExpectation("autovacuum_freeze_min_age", true),
      peg$c447 = "toast.autovacuum_freeze_min_age",
      peg$c448 = peg$literalExpectation("toast.autovacuum_freeze_min_age", true),
      peg$c449 = "autovacuum_freeze_max_age",
      peg$c450 = peg$literalExpectation("autovacuum_freeze_max_age", true),
      peg$c451 = "toast.autovacuum_freeze_max_age",
      peg$c452 = peg$literalExpectation("toast.autovacuum_freeze_max_age", true),
      peg$c453 = "autovacuum_freeze_table_age",
      peg$c454 = peg$literalExpectation("autovacuum_freeze_table_age", true),
      peg$c455 = "toast.autovacuum_freeze_table_age",
      peg$c456 = peg$literalExpectation("toast.autovacuum_freeze_table_age", true),
      peg$c457 = "autovacuum_multixact_freeze_min_age",
      peg$c458 = peg$literalExpectation("autovacuum_multixact_freeze_min_age", true),
      peg$c459 = "toast.autovacuum_multixact_freeze_min_age",
      peg$c460 = peg$literalExpectation("toast.autovacuum_multixact_freeze_min_age", true),
      peg$c461 = "autovacuum_multixact_freeze_max_age",
      peg$c462 = peg$literalExpectation("autovacuum_multixact_freeze_max_age", true),
      peg$c463 = "toast.autovacuum_multixact_freeze_max_age",
      peg$c464 = peg$literalExpectation("toast.autovacuum_multixact_freeze_max_age", true),
      peg$c465 = "autovacuum_multixact_freeze_table_age",
      peg$c466 = peg$literalExpectation("autovacuum_multixact_freeze_table_age", true),
      peg$c467 = "toast.autovacuum_multixact_freeze_table_age",
      peg$c468 = peg$literalExpectation("toast.autovacuum_multixact_freeze_table_age", true),
      peg$c469 = "log_autovacuum_min_duration",
      peg$c470 = peg$literalExpectation("log_autovacuum_min_duration", true),
      peg$c471 = "toast.log_autovacuum_min_duration",
      peg$c472 = peg$literalExpectation("toast.log_autovacuum_min_duration", true),
      peg$c473 = "user_catalog_table",
      peg$c474 = peg$literalExpectation("user_catalog_table", true),
      peg$c475 = function(create_table_normal) {
          return {
            command_name: "create_table",
            value: create_table_normal
          }
        },
      peg$c476 = function(alter_sub_syntax) {
      	return {
      		command_name: "alter_table",
      		value: alter_sub_syntax
      	}
      },
      peg$c477 = "*",
      peg$c478 = peg$literalExpectation("*", false),
      peg$c479 = function() {
      	return {
      		syntax_name: "alter_table_rename",
      	}
      },
      peg$c480 = function(name, actions) {
      		actions.forEach(({ type, t_value}) => {
      			switch(type.toLowerCase()) {
      				case "fk":
      					t_value.forEach(({ endpoints }) => {
      						endpoints[0].tableName = name.name;
      						endpoints[0].schemaName = name.schemaName;
      					})
      			}
      		})
      		return {
      			syntax_name: "alter_table_action",
      			value: actions
      		}
      	},
      peg$c481 = function(table_constraint) { // reuse table_constraint in Create_table_normal.pegjs
      		return table_constraint;
      	},
      peg$c482 = function(column_name, data_type, e) {return e},
      peg$c483 = function(column_name, data_type, expression) {
      		return {
      			type: "type",
      			expression
      		}
      	},
      peg$c484 = function(column_name, expression) {
      		return {
      			type: "set_default",
      			expression
      		}
      	},
      peg$c485 = function(column_name) {
      		return {
      			type: "drop_default"
      		}
      	},
      peg$c486 = function(column_name, action) {
      		if(action.toUpperCase() === "SET") {
      			return {
      				type: "set_not_null"
      			}
      		} else {
      			return {
      				type: "drop_not_null"
      			}
      		}
      	},
      peg$c487 = function(column_name) {
      		return {
      			type: "set_options"
      		}
      	},
      peg$c488 = function() {
      		return {
      			type: "unknown",
      		}
      	},
      peg$c489 = /^[^,;]/,
      peg$c490 = peg$classExpectation([",", ";"], true, false),
      peg$c491 = function(c) {
      	return removeReduntdantSpNewline(c.join(''));
      },
      peg$c492 = function(unique) {return null},
      peg$c493 = function(unique, name) {return name},
      peg$c494 = function(unique, name, table_name, type) {return type},
      peg$c495 = function(unique, name, table_name, type, index_properties) {
              const value = {
                  syntax_name: "create_table",
                  value: {
                      table_name,
                      columns: index_properties
                  }
              }

              if (name)
                  value.value.name = name;

              if (unique)
                  value.value.unique = true;

              if (type)
                  value.value.type = type.toUpperCase();

              return {
                  command_name: "create_index",
                  value
              }
          },
      peg$c496 = function(first, rest) {
          return [first, ...rest.map(r => r[3])];
      },
      peg$c497 = function(c) { return {value: `${c}`, type: "string" }},
      peg$c498 = function(e) {return { value:`${e}`, type: "expression"}},
      peg$c499 = "ASC",
      peg$c500 = peg$literalExpectation("ASC", false),
      peg$c501 = "DESC",
      peg$c502 = peg$literalExpectation("DESC", false),
      peg$c503 = function(column) {
          return column;
      },
      peg$c504 = function(comment_option, text) {
        if (text.toLowerCase() !== "null") {
          comment_option.value.text = text;
        } else comment_option.value.text = null;

        return {
          command_name: "comment",
          value: comment_option
        }
      },
      peg$c505 = function(path, column_name) {
          let dbName = null, schemaName = null, tableName;
          if (path.length === 1) {
            tableName = path[0][0];
          } else if (path.length === 2) {
            schemaName = path[0][0];
            tableName = path[1][0];
          }
          else {
            dbName = path[0][0];
            schemaName = path[1][0];
            tableName = path[2][0];
          }
          return {
            syntax_name: "column",
            value: {
              dbName,
              schemaName,
              tableName,
              columnName: column_name
            }
          }
        },
      peg$c506 = function(object_name) {
          return {
            syntax_name: "table",
            value: {
              table_name: object_name
            }
          }
        },
      peg$c507 = /^[^;]/,
      peg$c508 = peg$classExpectation([";"], true, false),
      peg$c509 = function() { return { syntax_name: "insert" } },
      peg$c510 = function() { return { syntax_name: "set" } },
      peg$c511 = function() { return { syntax_name: "reset" } },
      peg$c512 = function() { return { syntax_name: "select" } },
      peg$c513 = function() { return { syntax_name: "drop" } },
      peg$c514 = function() { return { syntax_name: "use" } },
      peg$c515 = function() { return { syntax_name: "create_sequence" } },
      peg$c516 = function() { return { syntax_name: "create_schema" } },
      peg$c517 = function() { return { syntax_name: "create_view" } },
      peg$c518 = function() { return { syntax_name: "alter_not_table" } },
      peg$c519 = function() { return { syntax_name: "comment_and_space" } },
      peg$c520 = function(value) {
        const loc = location();
        const t = text();
        return {
          command_name: "ignore_syntax",
          value,
          warning: {
            type: 'ignore',
            location: loc,
            text: t,
            message: `ignoring "${t}" at line: ${loc.start.line}`,
          },
        }
      },
      peg$c521 = function(create_table) { return create_table },
      peg$c522 = function(alter_table) { return alter_table },
      peg$c523 = function(create_index) { return create_index },
      peg$c524 = function(comment) { return comment },
      peg$c525 = function(ignore_syntax) { return ignore_syntax },

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseparser() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsecommand();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsecommand();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCREATE() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c1) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c2); }
    }

    return s0;
  }

  function peg$parseALTER() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c3) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c4); }
    }

    return s0;
  }

  function peg$parseUNIQUE() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c5) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c6); }
    }

    return s0;
  }

  function peg$parseINDEX() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c7) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c8); }
    }

    return s0;
  }

  function peg$parseTYPE() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c9) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c10); }
    }

    return s0;
  }

  function peg$parseFOREIGN_KEY() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c11) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c13) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseREFERENCES() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c15) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c16); }
    }

    return s0;
  }

  function peg$parseON() {
    var s0;

    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c17) {
      s0 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c18); }
    }

    return s0;
  }

  function peg$parseUSING() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c19) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c20); }
    }

    return s0;
  }

  function peg$parseTABLE() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c21) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c22); }
    }

    return s0;
  }

  function peg$parseIF_NOT_EXISTS() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c23) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c25) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c27) {
              s5 = input.substr(peg$currPos, 6);
              peg$currPos += 6;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c28); }
            }
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIF_EXISTS() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c23) {
      s1 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c24); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c27) {
          s3 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGLOBAL() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c29) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c30); }
    }

    return s0;
  }

  function peg$parsePRIVATE() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c32); }
    }

    return s0;
  }

  function peg$parseSHARDED() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c33) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c34); }
    }

    return s0;
  }

  function peg$parseDUPLICATED() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c35) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c36); }
    }

    return s0;
  }

  function peg$parseIMMUTABLE() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c37) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c38); }
    }

    return s0;
  }

  function peg$parseIMMUTABLE_BLOCKCHAIN() {
    var s0;

    if (input.substr(peg$currPos, 20).toLowerCase() === peg$c39) {
      s0 = input.substr(peg$currPos, 20);
      peg$currPos += 20;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c40); }
    }

    return s0;
  }

  function peg$parseSEGMENT() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c41) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c42); }
    }

    return s0;
  }

  function peg$parseCREATION() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c43) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c44); }
    }

    return s0;
  }

  function peg$parseIMMEDIATE() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c45) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c46); }
    }

    return s0;
  }

  function peg$parseDEFERRED() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c47) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c48); }
    }

    return s0;
  }

  function peg$parsePCTFREE() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c49) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c50); }
    }

    return s0;
  }

  function peg$parsePCTUSED() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c51) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c52); }
    }

    return s0;
  }

  function peg$parseINITRANS() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c53) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c54); }
    }

    return s0;
  }

  function peg$parseMAXTRANS() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c55) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c56); }
    }

    return s0;
  }

  function peg$parseCOMPRESS() {
    var s0;

    if (input.substr(peg$currPos, 8) === peg$c57) {
      s0 = peg$c57;
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c58); }
    }

    return s0;
  }

  function peg$parseNOCOMPRESS() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c59) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c60); }
    }

    return s0;
  }

  function peg$parseLOGGING() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c61) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c62); }
    }

    return s0;
  }

  function peg$parseINITIAL() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c63) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c64); }
    }

    return s0;
  }

  function peg$parseNEXT() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c65) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c66); }
    }

    return s0;
  }

  function peg$parseBITMAP() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c67) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c68); }
    }

    return s0;
  }

  function peg$parseMULTIVALUE() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c69) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c70); }
    }

    return s0;
  }

  function peg$parseMINEXTENTS() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c71) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c72); }
    }

    return s0;
  }

  function peg$parseMAXEXTENTS() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c73) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c74); }
    }

    return s0;
  }

  function peg$parseUNLIMITED() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c75) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c76); }
    }

    return s0;
  }

  function peg$parsePCTINCREASE() {
    var s0;

    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c77) {
      s0 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c78); }
    }

    return s0;
  }

  function peg$parseFREELISTS() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c79) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c80); }
    }

    return s0;
  }

  function peg$parseFREELIST() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c81) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c82); }
    }

    return s0;
  }

  function peg$parseGROUPS() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c83) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c84); }
    }

    return s0;
  }

  function peg$parseOPTIMAL() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c85) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c86); }
    }

    return s0;
  }

  function peg$parseBUFFER_POOL() {
    var s0;

    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c87) {
      s0 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c88); }
    }

    return s0;
  }

  function peg$parseKEEP() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c89) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c90); }
    }

    return s0;
  }

  function peg$parseNONE() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c91) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c92); }
    }

    return s0;
  }

  function peg$parseRECYCLE() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c93) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c94); }
    }

    return s0;
  }

  function peg$parseFLASH_CACHE() {
    var s0;

    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c95) {
      s0 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c96); }
    }

    return s0;
  }

  function peg$parseCELL_FLASH_CACHE() {
    var s0;

    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c97) {
      s0 = input.substr(peg$currPos, 16);
      peg$currPos += 16;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c98); }
    }

    return s0;
  }

  function peg$parseENCRYPT() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c99) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c100); }
    }

    return s0;
  }

  function peg$parseTEMPORARY() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c101) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c102); }
    }

    return s0;
  }

  function peg$parseCOLLATION() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c103) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c104); }
    }

    return s0;
  }

  function peg$parsePARTITION() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c105) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c106); }
    }

    return s0;
  }

  function peg$parseBY() {
    var s0;

    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c107) {
      s0 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c108); }
    }

    return s0;
  }

  function peg$parseRANGE() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c109) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c110); }
    }

    return s0;
  }

  function peg$parseLIST() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c111) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c112); }
    }

    return s0;
  }

  function peg$parseHASH() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c113) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c114); }
    }

    return s0;
  }

  function peg$parseLIKE() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c115) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c116); }
    }

    return s0;
  }

  function peg$parseINHERITS() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c117) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c118); }
    }

    return s0;
  }

  function peg$parseINHERIT() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c119) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c120); }
    }

    return s0;
  }

  function peg$parseWITH() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c121) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c122); }
    }

    return s0;
  }

  function peg$parseWITHOUT() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c123) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c124); }
    }

    return s0;
  }

  function peg$parseCOMMIT() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c125) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c126); }
    }

    return s0;
  }

  function peg$parseROWS() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c127) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c128); }
    }

    return s0;
  }

  function peg$parseDELETE() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c129) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c130); }
    }

    return s0;
  }

  function peg$parseDROP() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c131) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c132); }
    }

    return s0;
  }

  function peg$parseTABLESPACE() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c133) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c134); }
    }

    return s0;
  }

  function peg$parseCONSTRAINT() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c135) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c136); }
    }

    return s0;
  }

  function peg$parseNO() {
    var s0;

    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c137) {
      s0 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c138); }
    }

    return s0;
  }

  function peg$parseNOT() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c25) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c26); }
    }

    return s0;
  }

  function peg$parseNULL() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c139) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c140); }
    }

    return s0;
  }

  function peg$parseCHECK() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c141) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c142); }
    }

    return s0;
  }

  function peg$parseDEFAULT() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c143) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c144); }
    }

    return s0;
  }

  function peg$parsePRIMARY_KEY() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c145) {
      s1 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c146); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c13) {
          s3 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c14); }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMATCH() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c147) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c148); }
    }

    return s0;
  }

  function peg$parseFULL() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c149) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c150); }
    }

    return s0;
  }

  function peg$parsePARTIAL() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c151) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c152); }
    }

    return s0;
  }

  function peg$parseSIMPLE() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c153) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c154); }
    }

    return s0;
  }

  function peg$parseUPDATE() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c155) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c156); }
    }

    return s0;
  }

  function peg$parseDEFERRABLE() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c157) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c158); }
    }

    return s0;
  }

  function peg$parseINITIALLY() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c159) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c160); }
    }

    return s0;
  }

  function peg$parseEXCLUDE() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c161) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c162); }
    }

    return s0;
  }

  function peg$parseWHERE() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c163) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c164); }
    }

    return s0;
  }

  function peg$parseINCLUDING() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c165) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c166); }
    }

    return s0;
  }

  function peg$parseEXCLUDING() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c167) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c168); }
    }

    return s0;
  }

  function peg$parseCOMMENTS() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c169) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c170); }
    }

    return s0;
  }

  function peg$parseCONSTRAINTS() {
    var s0;

    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c171) {
      s0 = input.substr(peg$currPos, 11);
      peg$currPos += 11;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c172); }
    }

    return s0;
  }

  function peg$parseGENERATED() {
    var s0;

    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c173) {
      s0 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c174); }
    }

    return s0;
  }

  function peg$parseALWAYS() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c175) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c176); }
    }

    return s0;
  }

  function peg$parseAS() {
    var s0;

    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c177) {
      s0 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c178); }
    }

    return s0;
  }

  function peg$parseADD() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c179) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c180); }
    }

    return s0;
  }

  function peg$parseONLY() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c181) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c182); }
    }

    return s0;
  }

  function peg$parseDEFAULTS() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c183) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c184); }
    }

    return s0;
  }

  function peg$parseIDENTITY() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c185) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c186); }
    }

    return s0;
  }

  function peg$parseINDEXES() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c187) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c188); }
    }

    return s0;
  }

  function peg$parseSTATISTICS() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c189) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c190); }
    }

    return s0;
  }

  function peg$parseSTORAGE() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c191) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c192); }
    }

    return s0;
  }

  function peg$parseINCLUDE() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c193) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c194); }
    }

    return s0;
  }

  function peg$parseINCLUDES() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c195) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c196); }
    }

    return s0;
  }

  function peg$parseALL() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c197) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c198); }
    }

    return s0;
  }

  function peg$parseOF() {
    var s0;

    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c199) {
      s0 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c200); }
    }

    return s0;
  }

  function peg$parseOPTIONS() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c201) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c202); }
    }

    return s0;
  }

  function peg$parseFOR() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c203) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c204); }
    }

    return s0;
  }

  function peg$parseVALUES() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c205) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c206); }
    }

    return s0;
  }

  function peg$parseIN() {
    var s0;

    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c207) {
      s0 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c208); }
    }

    return s0;
  }

  function peg$parseFROM() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c209) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c210); }
    }

    return s0;
  }

  function peg$parseTO() {
    var s0;

    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c211) {
      s0 = input.substr(peg$currPos, 2);
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c212); }
    }

    return s0;
  }

  function peg$parseTRUE() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c213) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c214); }
    }

    return s0;
  }

  function peg$parseFALSE() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c215) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c216); }
    }

    return s0;
  }

  function peg$parseVALID() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c217) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c218); }
    }

    return s0;
  }

  function peg$parseCOLUMN() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c219) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c220); }
    }

    return s0;
  }

  function peg$parseSET() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c221) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c222); }
    }

    return s0;
  }

  function peg$parseDATA() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c223) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c224); }
    }

    return s0;
  }

  function peg$parseRESET() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c225) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c226); }
    }

    return s0;
  }

  function peg$parseMAIN() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c227) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c228); }
    }

    return s0;
  }

  function peg$parseASC() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c229) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c230); }
    }

    return s0;
  }

  function peg$parseDESC() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c231) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c232); }
    }

    return s0;
  }

  function peg$parseNULLS() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c233) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c234); }
    }

    return s0;
  }

  function peg$parseFIRST() {
    var s0;

    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c235) {
      s0 = input.substr(peg$currPos, 5);
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c236); }
    }

    return s0;
  }

  function peg$parseLAST() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c237) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c238); }
    }

    return s0;
  }

  function peg$parseCOMMENT() {
    var s0;

    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c239) {
      s0 = input.substr(peg$currPos, 7);
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c240); }
    }

    return s0;
  }

  function peg$parseIS() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c241) {
      s0 = peg$c241;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c242); }
    }

    return s0;
  }

  function peg$parseINSERT() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c243) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c244); }
    }

    return s0;
  }

  function peg$parseSELECT() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c245) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c246); }
    }

    return s0;
  }

  function peg$parseUSE() {
    var s0;

    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c247) {
      s0 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c248); }
    }

    return s0;
  }

  function peg$parseSEQUENCE() {
    var s0;

    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c249) {
      s0 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c250); }
    }

    return s0;
  }

  function peg$parseSCHEMA() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c251) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c252); }
    }

    return s0;
  }

  function peg$parseVIEW() {
    var s0;

    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c253) {
      s0 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c254); }
    }

    return s0;
  }

  function peg$parseRENAME() {
    var s0;

    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c255) {
      s0 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c256); }
    }

    return s0;
  }

  function peg$parseexpression() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsefactor();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsefactor();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c258(s1);
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c257); }
    }

    return s0;
  }

  function peg$parsefactor() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parsecharacter();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parsecharacter();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s4 = peg$c259;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c260); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpression();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s6 = peg$c261;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c262); }
            }
            if (s6 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5, s6];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c259;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c260); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseexpression();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c261;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c262); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parseexprCharNoCommaSpace();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseexprCharNoCommaSpace();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parse_();
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s4 = peg$c263;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c264); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c265) {
                s4 = peg$c265;
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c266); }
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                s5 = peg$parseendline();
                if (s5 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c265) {
                    s6 = peg$c265;
                    peg$currPos += 2;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c266); }
                  }
                  if (s6 !== peg$FAILED) {
                    s5 = [s5, s6];
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              }
            }
          }
          peg$silentFails--;
          if (s4 !== peg$FAILED) {
            peg$currPos = s3;
            s3 = void 0;
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = [];
          s3 = peg$parseexprChar();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parseexprChar();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            peg$silentFails++;
            if (input.length > peg$currPos) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c267); }
            }
            peg$silentFails--;
            if (s4 !== peg$FAILED) {
              peg$currPos = s3;
              s3 = void 0;
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s2 = [s2, s3];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c268(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseexprChar() {
    var s0;

    if (peg$c269.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c270); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parsesp();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenewline();
        if (s0 === peg$FAILED) {
          s0 = peg$parsetab();
        }
      }
    }

    return s0;
  }

  function peg$parseexprCharNoCommaSpace() {
    var s0;

    if (peg$c271.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c272); }
    }

    return s0;
  }

  function peg$parsecolumn_name() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$parseidentifier();
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c273); }
    }

    return s0;
  }

  function peg$parsepath_name() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseidentifier();
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s5 = peg$c274;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c275); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s3 = [s3, s4, s5, s6];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseidentifier();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c274;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c275); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c276(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetable_name() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parsepath_name();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseidentifier();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c278(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c277); }
    }

    return s0;
  }

  function peg$parsestring_constant() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      s1 = peg$c280;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c281); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsechar_inside_single_quote();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsechar_inside_single_quote();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c280;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c281); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c282(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c279); }
    }

    return s0;
  }

  function peg$parsechar_inside_single_quote() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c283) {
      s1 = peg$c283;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c284); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c285();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      if (peg$c286.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c287); }
      }
    }

    return s0;
  }

  function peg$parseidentifier() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c288;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c289); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsechar_inside_double_quote();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsechar_inside_double_quote();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s3 = peg$c288;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c289); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c290(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecharacter();
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsecharacter();
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c290(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsechar_inside_double_quote() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c291) {
      s1 = peg$c291;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c292); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c293();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      if (peg$c294.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c295); }
      }
    }

    return s0;
  }

  function peg$parsenumeric_constant() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsedigits();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c274;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c275); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsedigits();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 101) {
            s6 = peg$c297;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c298); }
          }
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s7 = peg$c299;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c300); }
            }
            if (s7 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s7 = peg$c301;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c302); }
              }
            }
            if (s7 === peg$FAILED) {
              s7 = null;
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsedigits();
              if (s8 !== peg$FAILED) {
                s6 = [s6, s7, s8];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (s5 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parsedigits();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c274;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c275); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsedigits();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 101) {
              s6 = peg$c297;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c298); }
            }
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 43) {
                s7 = peg$c299;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c300); }
              }
              if (s7 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s7 = peg$c301;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c302); }
                }
              }
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsedigits();
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsedigits();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 101) {
            s3 = peg$c297;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c298); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 43) {
              s4 = peg$c299;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c300); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s4 = peg$c301;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c302); }
              }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsedigits();
              if (s5 !== peg$FAILED) {
                s2 = [s2, s3, s4, s5];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c303(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$parsedigits();
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c296); }
    }

    return s0;
  }

  function peg$parsedigits() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsedigit();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsedigit();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c304(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsedigit() {
    var s0;

    if (peg$c305.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c306); }
    }

    return s0;
  }

  function peg$parsedata_type() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c308) {
      s1 = input.substr(peg$currPos, 9);
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c309); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c310) {
          s3 = input.substr(peg$currPos, 7);
          peg$currPos += 7;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c311); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
              s6 = peg$c259;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c260); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexpression();
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s8 = peg$c261;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c262); }
                }
                if (s8 !== peg$FAILED) {
                  s6 = [s6, s7, s8];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsearray_extension();
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c312(s1, s3, s5, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c313) {
        s1 = input.substr(peg$currPos, 11);
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c314); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c259;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c260); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsenumeric_constant();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c261;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c262); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 !== peg$FAILED) {
                      s4 = [s4, s5, s6, s7, s8, s9];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsearray_extension();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c315(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c316) {
          s1 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c317); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c259;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c260); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsenumeric_constant();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c261;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c262); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_();
                      if (s9 !== peg$FAILED) {
                        s4 = [s4, s5, s6, s7, s8, s9];
                        s3 = s4;
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c123) {
                s5 = input.substr(peg$currPos, 7);
                peg$currPos += 7;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c318); }
              }
              if (s5 === peg$FAILED) {
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c121) {
                  s5 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c319); }
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c320) {
                    s7 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c321); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c322) {
                        s9 = input.substr(peg$currPos, 4);
                        peg$currPos += 4;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c323); }
                      }
                      if (s9 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8, s9];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsearray_extension();
                if (s5 === peg$FAILED) {
                  s5 = null;
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c324(s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c325) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c326); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 40) {
                s4 = peg$c259;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c260); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parse_();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsenumeric_constant();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse_();
                    if (s7 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s8 = peg$c261;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c262); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse_();
                        if (s9 !== peg$FAILED) {
                          s4 = [s4, s5, s6, s7, s8, s9];
                          s3 = s4;
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsearray_extension();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c327(s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c320) {
              s1 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c321); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                  s4 = peg$c259;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c260); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse_();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parsenumeric_constant();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (s7 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s8 = peg$c261;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c262); }
                        }
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse_();
                          if (s9 !== peg$FAILED) {
                            s4 = [s4, s5, s6, s7, s8, s9];
                            s3 = s4;
                          } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s3;
                          s3 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.substr(peg$currPos, 7).toLowerCase() === peg$c123) {
                    s5 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c318); }
                  }
                  if (s5 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c121) {
                      s5 = input.substr(peg$currPos, 4);
                      peg$currPos += 4;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c319); }
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c320) {
                        s7 = input.substr(peg$currPos, 4);
                        peg$currPos += 4;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c321); }
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parse_();
                        if (s8 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c322) {
                            s9 = input.substr(peg$currPos, 4);
                            peg$currPos += 4;
                          } else {
                            s9 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c323); }
                          }
                          if (s9 !== peg$FAILED) {
                            s5 = [s5, s6, s7, s8, s9];
                            s4 = s5;
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsearray_extension();
                    if (s5 === peg$FAILED) {
                      s5 = null;
                    }
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c328(s3, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsetype_name();
              if (s1 !== peg$FAILED) {
                s2 = peg$parsearray_extension();
                if (s2 === peg$FAILED) {
                  s2 = null;
                }
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c329(s1, s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsedouble_quote();
                if (s1 !== peg$FAILED) {
                  s2 = [];
                  if (peg$c330.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c331); }
                  }
                  if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                      s2.push(s3);
                      if (peg$c330.test(input.charAt(peg$currPos))) {
                        s3 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c331); }
                      }
                    }
                  } else {
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parsedouble_quote();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c332(s2);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c307); }
    }

    return s0;
  }

  function peg$parsetype_name() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsepath_name();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsecharacter();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsecharacter();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c259;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c260); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseexpression();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s7 = peg$c261;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c262); }
              }
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c333(s1, s2, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsearray_extension() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c334) {
        s2 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c335); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 91) {
            s5 = peg$c336;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c337); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexpression();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s9 = peg$c338;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c339); }
                  }
                  if (s9 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7, s8, s9];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c340(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c336;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c337); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseexpression();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s8 = peg$c338;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c339); }
                }
                if (s8 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7, s8];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s4 = peg$c336;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c337); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parse_();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseexpression();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                      s8 = peg$c338;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c339); }
                    }
                    if (s8 !== peg$FAILED) {
                      s4 = [s4, s5, s6, s7, s8];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c341(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedefault_expr() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsestring_constant();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c342(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsenumeric_constant();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c343(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c213) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c214); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 5).toLowerCase() === peg$c215) {
            s1 = input.substr(peg$currPos, 5);
            peg$currPos += 5;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c216); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c139) {
              s1 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c140); }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c344(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsefactor();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c345(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsesp() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c346;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c347); }
    }

    return s0;
  }

  function peg$parsedouble_quote() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c288;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c289); }
    }

    return s0;
  }

  function peg$parsesingle_quote() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c280;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c281); }
    }

    return s0;
  }

  function peg$parsecomma() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c263;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c264); }
    }

    return s0;
  }

  function peg$parsetab() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 9) {
      s0 = peg$c348;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c349); }
    }

    return s0;
  }

  function peg$parsesemicolon() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 59) {
      s0 = peg$c350;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c351); }
    }

    return s0;
  }

  function peg$parseendline() {
    var s0, s1, s2;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsesp();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parsesp();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsenewline();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c352); }
    }

    return s0;
  }

  function peg$parsenewline() {
    var s0, s1;

    peg$silentFails++;
    if (input.substr(peg$currPos, 2) === peg$c354) {
      s0 = peg$c354;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c355); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c356;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c357); }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c353); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsecmt();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesp();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetab();
        if (s1 === peg$FAILED) {
          s1 = peg$parsenewline();
        }
      }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parsecmt();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesp();
        if (s1 === peg$FAILED) {
          s1 = peg$parsetab();
          if (s1 === peg$FAILED) {
            s1 = peg$parsenewline();
          }
        }
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c358); }
    }

    return s0;
  }

  function peg$parse__() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    s1 = peg$parsecmt();
    if (s1 === peg$FAILED) {
      s1 = peg$parsesp();
      if (s1 === peg$FAILED) {
        s1 = peg$parsetab();
        if (s1 === peg$FAILED) {
          s1 = peg$parsenewline();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsecmt();
        if (s1 === peg$FAILED) {
          s1 = peg$parsesp();
          if (s1 === peg$FAILED) {
            s1 = peg$parsetab();
            if (s1 === peg$FAILED) {
              s1 = peg$parsenewline();
            }
          }
        }
      }
    } else {
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c358); }
    }

    return s0;
  }

  function peg$parsecmt() {
    var s0, s1, s2, s3, s4, s5;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c360) {
      s1 = peg$c360;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c361); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$c362.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c363); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c362.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c363); }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c364) {
        s1 = peg$c364;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c365); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 2) === peg$c366) {
          s5 = peg$c366;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c367); }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
          s4 = void 0;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.length > peg$currPos) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c267); }
          }
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$currPos;
          peg$silentFails++;
          if (input.substr(peg$currPos, 2) === peg$c366) {
            s5 = peg$c366;
            peg$currPos += 2;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c367); }
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c267); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c366) {
            s3 = peg$c366;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c367); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesemicolon();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c359); }
    }

    return s0;
  }

  function peg$parsecharacter() {
    var s0, s1;

    peg$silentFails++;
    if (peg$c369.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c370); }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c368); }
    }

    return s0;
  }

  function peg$parseoperator() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c371) {
      s0 = peg$c371;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c372); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c373;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c374); }
      }
    }

    return s0;
  }

  function peg$parsecreate_table_normal() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39, s40;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCREATE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          s5 = peg$currPos;
          s6 = peg$parseGLOBAL();
          if (s6 !== peg$FAILED) {
            s7 = peg$parse__();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$parsePRIVATE();
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseTEMPORARY();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse__();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = peg$parseSHARDED();
            if (s4 === peg$FAILED) {
              s4 = peg$parseDUPLICATED();
              if (s4 === peg$FAILED) {
                s4 = peg$parseIMMUTABLE();
                if (s4 === peg$FAILED) {
                  s4 = peg$parseIMMUTABLE_BLOCKCHAIN();
                }
              }
            }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseTABLE();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseIF_NOT_EXISTS();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsetable_name();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse_();
                    if (s9 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s10 = peg$c259;
                        peg$currPos++;
                      } else {
                        s10 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c260); }
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsetable_properties();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parse_();
                            if (s13 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s14 = peg$c261;
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c262); }
                              }
                              if (s14 !== peg$FAILED) {
                                s15 = peg$currPos;
                                s16 = peg$parse__();
                                if (s16 !== peg$FAILED) {
                                  s17 = peg$parseSEGMENT();
                                  if (s17 !== peg$FAILED) {
                                    s18 = peg$parse__();
                                    if (s18 !== peg$FAILED) {
                                      s19 = peg$parseCREATION();
                                      if (s19 !== peg$FAILED) {
                                        s20 = peg$parse__();
                                        if (s20 !== peg$FAILED) {
                                          s21 = peg$parseIMMEDIATE();
                                          if (s21 === peg$FAILED) {
                                            s21 = peg$parseDEFERRED();
                                          }
                                          if (s21 !== peg$FAILED) {
                                            s16 = [s16, s17, s18, s19, s20, s21];
                                            s15 = s16;
                                          } else {
                                            peg$currPos = s15;
                                            s15 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s15;
                                          s15 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s15;
                                        s15 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s15;
                                      s15 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s15;
                                    s15 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s15;
                                  s15 = peg$FAILED;
                                }
                                if (s15 === peg$FAILED) {
                                  s15 = null;
                                }
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$currPos;
                                  s17 = peg$parse__();
                                  if (s17 !== peg$FAILED) {
                                    s18 = peg$parsePCTFREE();
                                    if (s18 !== peg$FAILED) {
                                      s19 = peg$parse__();
                                      if (s19 !== peg$FAILED) {
                                        s20 = peg$parseinteger();
                                        if (s20 !== peg$FAILED) {
                                          s17 = [s17, s18, s19, s20];
                                          s16 = s17;
                                        } else {
                                          peg$currPos = s16;
                                          s16 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s16;
                                        s16 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s16;
                                      s16 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s16;
                                    s16 = peg$FAILED;
                                  }
                                  if (s16 === peg$FAILED) {
                                    s16 = null;
                                  }
                                  if (s16 !== peg$FAILED) {
                                    s17 = peg$currPos;
                                    s18 = peg$parse__();
                                    if (s18 !== peg$FAILED) {
                                      s19 = peg$parsePCTUSED();
                                      if (s19 !== peg$FAILED) {
                                        s20 = peg$parse__();
                                        if (s20 !== peg$FAILED) {
                                          s21 = peg$parseinteger();
                                          if (s21 !== peg$FAILED) {
                                            s18 = [s18, s19, s20, s21];
                                            s17 = s18;
                                          } else {
                                            peg$currPos = s17;
                                            s17 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s17;
                                          s17 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s17;
                                        s17 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s17;
                                      s17 = peg$FAILED;
                                    }
                                    if (s17 === peg$FAILED) {
                                      s17 = null;
                                    }
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$currPos;
                                      s19 = peg$parse__();
                                      if (s19 !== peg$FAILED) {
                                        s20 = peg$parseINITRANS();
                                        if (s20 !== peg$FAILED) {
                                          s21 = peg$parse__();
                                          if (s21 !== peg$FAILED) {
                                            s22 = peg$parseinteger();
                                            if (s22 !== peg$FAILED) {
                                              s19 = [s19, s20, s21, s22];
                                              s18 = s19;
                                            } else {
                                              peg$currPos = s18;
                                              s18 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s18;
                                            s18 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s18;
                                          s18 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s18;
                                        s18 = peg$FAILED;
                                      }
                                      if (s18 === peg$FAILED) {
                                        s18 = null;
                                      }
                                      if (s18 !== peg$FAILED) {
                                        s19 = peg$currPos;
                                        s20 = peg$parse__();
                                        if (s20 !== peg$FAILED) {
                                          s21 = peg$parseMAXTRANS();
                                          if (s21 !== peg$FAILED) {
                                            s22 = peg$parse__();
                                            if (s22 !== peg$FAILED) {
                                              s23 = peg$parseinteger();
                                              if (s23 !== peg$FAILED) {
                                                s20 = [s20, s21, s22, s23];
                                                s19 = s20;
                                              } else {
                                                peg$currPos = s19;
                                                s19 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s19;
                                              s19 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s19;
                                            s19 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s19;
                                          s19 = peg$FAILED;
                                        }
                                        if (s19 === peg$FAILED) {
                                          s19 = null;
                                        }
                                        if (s19 !== peg$FAILED) {
                                          s20 = peg$currPos;
                                          s21 = peg$parse__();
                                          if (s21 !== peg$FAILED) {
                                            s22 = peg$parseCOMPRESS();
                                            if (s22 === peg$FAILED) {
                                              s22 = peg$parseNOCOMPRESS();
                                            }
                                            if (s22 !== peg$FAILED) {
                                              s23 = peg$parse__();
                                              if (s23 !== peg$FAILED) {
                                                s24 = peg$parseLOGGING();
                                                if (s24 !== peg$FAILED) {
                                                  s21 = [s21, s22, s23, s24];
                                                  s20 = s21;
                                                } else {
                                                  peg$currPos = s20;
                                                  s20 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s20;
                                                s20 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s20;
                                              s20 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s20;
                                            s20 = peg$FAILED;
                                          }
                                          if (s20 === peg$FAILED) {
                                            s20 = null;
                                          }
                                          if (s20 !== peg$FAILED) {
                                            s21 = peg$currPos;
                                            s22 = peg$parse__();
                                            if (s22 !== peg$FAILED) {
                                              s23 = peg$parseSTORAGE();
                                              if (s23 !== peg$FAILED) {
                                                s24 = peg$parse_();
                                                if (s24 !== peg$FAILED) {
                                                  if (input.charCodeAt(peg$currPos) === 40) {
                                                    s25 = peg$c259;
                                                    peg$currPos++;
                                                  } else {
                                                    s25 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c260); }
                                                  }
                                                  if (s25 !== peg$FAILED) {
                                                    s26 = peg$currPos;
                                                    s27 = peg$parseINITIAL();
                                                    if (s27 !== peg$FAILED) {
                                                      s28 = peg$parse__();
                                                      if (s28 !== peg$FAILED) {
                                                        s29 = peg$parseinteger();
                                                        if (s29 !== peg$FAILED) {
                                                          s27 = [s27, s28, s29];
                                                          s26 = s27;
                                                        } else {
                                                          peg$currPos = s26;
                                                          s26 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s26;
                                                        s26 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s26;
                                                      s26 = peg$FAILED;
                                                    }
                                                    if (s26 === peg$FAILED) {
                                                      s26 = null;
                                                    }
                                                    if (s26 !== peg$FAILED) {
                                                      s27 = peg$currPos;
                                                      s28 = peg$parse__();
                                                      if (s28 !== peg$FAILED) {
                                                        s29 = peg$parseNEXT();
                                                        if (s29 !== peg$FAILED) {
                                                          s30 = peg$parse__();
                                                          if (s30 !== peg$FAILED) {
                                                            s31 = peg$parseinteger();
                                                            if (s31 !== peg$FAILED) {
                                                              s28 = [s28, s29, s30, s31];
                                                              s27 = s28;
                                                            } else {
                                                              peg$currPos = s27;
                                                              s27 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s27;
                                                            s27 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s27;
                                                          s27 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s27;
                                                        s27 = peg$FAILED;
                                                      }
                                                      if (s27 === peg$FAILED) {
                                                        s27 = null;
                                                      }
                                                      if (s27 !== peg$FAILED) {
                                                        s28 = peg$currPos;
                                                        s29 = peg$parse__();
                                                        if (s29 !== peg$FAILED) {
                                                          s30 = peg$parseMINEXTENTS();
                                                          if (s30 !== peg$FAILED) {
                                                            s31 = peg$parse__();
                                                            if (s31 !== peg$FAILED) {
                                                              s32 = peg$parseinteger();
                                                              if (s32 !== peg$FAILED) {
                                                                s29 = [s29, s30, s31, s32];
                                                                s28 = s29;
                                                              } else {
                                                                peg$currPos = s28;
                                                                s28 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s28;
                                                              s28 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s28;
                                                            s28 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s28;
                                                          s28 = peg$FAILED;
                                                        }
                                                        if (s28 === peg$FAILED) {
                                                          s28 = null;
                                                        }
                                                        if (s28 !== peg$FAILED) {
                                                          s29 = peg$currPos;
                                                          s30 = peg$parse__();
                                                          if (s30 !== peg$FAILED) {
                                                            s31 = peg$parseMAXEXTENTS();
                                                            if (s31 !== peg$FAILED) {
                                                              s32 = peg$parse__();
                                                              if (s32 !== peg$FAILED) {
                                                                s33 = peg$parseUNLIMITED();
                                                                if (s33 === peg$FAILED) {
                                                                  s33 = peg$parseinteger();
                                                                }
                                                                if (s33 !== peg$FAILED) {
                                                                  s30 = [s30, s31, s32, s33];
                                                                  s29 = s30;
                                                                } else {
                                                                  peg$currPos = s29;
                                                                  s29 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s29;
                                                                s29 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s29;
                                                              s29 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s29;
                                                            s29 = peg$FAILED;
                                                          }
                                                          if (s29 === peg$FAILED) {
                                                            s29 = null;
                                                          }
                                                          if (s29 !== peg$FAILED) {
                                                            s30 = peg$currPos;
                                                            s31 = peg$parse__();
                                                            if (s31 !== peg$FAILED) {
                                                              s32 = peg$parsePCTINCREASE();
                                                              if (s32 !== peg$FAILED) {
                                                                s33 = peg$parse__();
                                                                if (s33 !== peg$FAILED) {
                                                                  s34 = peg$parseinteger();
                                                                  if (s34 !== peg$FAILED) {
                                                                    s31 = [s31, s32, s33, s34];
                                                                    s30 = s31;
                                                                  } else {
                                                                    peg$currPos = s30;
                                                                    s30 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s30;
                                                                  s30 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s30;
                                                                s30 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s30;
                                                              s30 = peg$FAILED;
                                                            }
                                                            if (s30 === peg$FAILED) {
                                                              s30 = null;
                                                            }
                                                            if (s30 !== peg$FAILED) {
                                                              s31 = peg$currPos;
                                                              s32 = peg$parse__();
                                                              if (s32 !== peg$FAILED) {
                                                                s33 = peg$parseFREELISTS();
                                                                if (s33 !== peg$FAILED) {
                                                                  s34 = peg$parse__();
                                                                  if (s34 !== peg$FAILED) {
                                                                    s35 = peg$parseinteger();
                                                                    if (s35 !== peg$FAILED) {
                                                                      s32 = [s32, s33, s34, s35];
                                                                      s31 = s32;
                                                                    } else {
                                                                      peg$currPos = s31;
                                                                      s31 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s31;
                                                                    s31 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s31;
                                                                  s31 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s31;
                                                                s31 = peg$FAILED;
                                                              }
                                                              if (s31 === peg$FAILED) {
                                                                s31 = null;
                                                              }
                                                              if (s31 !== peg$FAILED) {
                                                                s32 = peg$currPos;
                                                                s33 = peg$parse__();
                                                                if (s33 !== peg$FAILED) {
                                                                  s34 = peg$parseFREELIST();
                                                                  if (s34 !== peg$FAILED) {
                                                                    s35 = peg$parse__();
                                                                    if (s35 !== peg$FAILED) {
                                                                      s36 = peg$parseGROUPS();
                                                                      if (s36 !== peg$FAILED) {
                                                                        s37 = peg$parse__();
                                                                        if (s37 !== peg$FAILED) {
                                                                          s38 = peg$parseinteger();
                                                                          if (s38 !== peg$FAILED) {
                                                                            s33 = [s33, s34, s35, s36, s37, s38];
                                                                            s32 = s33;
                                                                          } else {
                                                                            peg$currPos = s32;
                                                                            s32 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s32;
                                                                          s32 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s32;
                                                                        s32 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s32;
                                                                      s32 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s32;
                                                                    s32 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s32;
                                                                  s32 = peg$FAILED;
                                                                }
                                                                if (s32 === peg$FAILED) {
                                                                  s32 = null;
                                                                }
                                                                if (s32 !== peg$FAILED) {
                                                                  s33 = peg$currPos;
                                                                  s34 = peg$parse__();
                                                                  if (s34 !== peg$FAILED) {
                                                                    s35 = peg$parseOPTIMAL();
                                                                    if (s35 !== peg$FAILED) {
                                                                      s36 = peg$parse__();
                                                                      if (s36 !== peg$FAILED) {
                                                                        s37 = peg$parseinteger();
                                                                        if (s37 === peg$FAILED) {
                                                                          s37 = peg$parseNULL();
                                                                        }
                                                                        if (s37 === peg$FAILED) {
                                                                          s37 = null;
                                                                        }
                                                                        if (s37 !== peg$FAILED) {
                                                                          s34 = [s34, s35, s36, s37];
                                                                          s33 = s34;
                                                                        } else {
                                                                          peg$currPos = s33;
                                                                          s33 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s33;
                                                                        s33 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s33;
                                                                      s33 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s33;
                                                                    s33 = peg$FAILED;
                                                                  }
                                                                  if (s33 === peg$FAILED) {
                                                                    s33 = null;
                                                                  }
                                                                  if (s33 !== peg$FAILED) {
                                                                    s34 = peg$currPos;
                                                                    s35 = peg$parse__();
                                                                    if (s35 !== peg$FAILED) {
                                                                      s36 = peg$parseBUFFER_POOL();
                                                                      if (s36 !== peg$FAILED) {
                                                                        s37 = peg$parse__();
                                                                        if (s37 !== peg$FAILED) {
                                                                          s38 = peg$parseKEEP();
                                                                          if (s38 === peg$FAILED) {
                                                                            s38 = peg$parseRECYCLE();
                                                                            if (s38 === peg$FAILED) {
                                                                              s38 = peg$parseDEFAULT();
                                                                            }
                                                                          }
                                                                          if (s38 !== peg$FAILED) {
                                                                            s35 = [s35, s36, s37, s38];
                                                                            s34 = s35;
                                                                          } else {
                                                                            peg$currPos = s34;
                                                                            s34 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s34;
                                                                          s34 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s34;
                                                                        s34 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s34;
                                                                      s34 = peg$FAILED;
                                                                    }
                                                                    if (s34 === peg$FAILED) {
                                                                      s34 = null;
                                                                    }
                                                                    if (s34 !== peg$FAILED) {
                                                                      s35 = peg$currPos;
                                                                      s36 = peg$parse__();
                                                                      if (s36 !== peg$FAILED) {
                                                                        s37 = peg$parseFLASH_CACHE();
                                                                        if (s37 !== peg$FAILED) {
                                                                          s38 = peg$parse__();
                                                                          if (s38 !== peg$FAILED) {
                                                                            s39 = peg$parseKEEP();
                                                                            if (s39 === peg$FAILED) {
                                                                              s39 = peg$parseNONE();
                                                                              if (s39 === peg$FAILED) {
                                                                                s39 = peg$parseDEFAULT();
                                                                              }
                                                                            }
                                                                            if (s39 !== peg$FAILED) {
                                                                              s36 = [s36, s37, s38, s39];
                                                                              s35 = s36;
                                                                            } else {
                                                                              peg$currPos = s35;
                                                                              s35 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s35;
                                                                            s35 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s35;
                                                                          s35 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s35;
                                                                        s35 = peg$FAILED;
                                                                      }
                                                                      if (s35 === peg$FAILED) {
                                                                        s35 = null;
                                                                      }
                                                                      if (s35 !== peg$FAILED) {
                                                                        s36 = peg$currPos;
                                                                        s37 = peg$parse__();
                                                                        if (s37 !== peg$FAILED) {
                                                                          s38 = peg$parseCELL_FLASH_CACHE();
                                                                          if (s38 !== peg$FAILED) {
                                                                            s39 = peg$parse__();
                                                                            if (s39 !== peg$FAILED) {
                                                                              s40 = peg$parseKEEP();
                                                                              if (s40 === peg$FAILED) {
                                                                                s40 = peg$parseNONE();
                                                                                if (s40 === peg$FAILED) {
                                                                                  s40 = peg$parseDEFAULT();
                                                                                }
                                                                              }
                                                                              if (s40 !== peg$FAILED) {
                                                                                s37 = [s37, s38, s39, s40];
                                                                                s36 = s37;
                                                                              } else {
                                                                                peg$currPos = s36;
                                                                                s36 = peg$FAILED;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s36;
                                                                              s36 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s36;
                                                                            s36 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s36;
                                                                          s36 = peg$FAILED;
                                                                        }
                                                                        if (s36 === peg$FAILED) {
                                                                          s36 = null;
                                                                        }
                                                                        if (s36 !== peg$FAILED) {
                                                                          s37 = peg$currPos;
                                                                          s38 = peg$parse__();
                                                                          if (s38 !== peg$FAILED) {
                                                                            s39 = peg$parseENCRYPT();
                                                                            if (s39 !== peg$FAILED) {
                                                                              s38 = [s38, s39];
                                                                              s37 = s38;
                                                                            } else {
                                                                              peg$currPos = s37;
                                                                              s37 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s37;
                                                                            s37 = peg$FAILED;
                                                                          }
                                                                          if (s37 === peg$FAILED) {
                                                                            s37 = null;
                                                                          }
                                                                          if (s37 !== peg$FAILED) {
                                                                            s38 = peg$parse_();
                                                                            if (s38 !== peg$FAILED) {
                                                                              if (input.charCodeAt(peg$currPos) === 41) {
                                                                                s39 = peg$c261;
                                                                                peg$currPos++;
                                                                              } else {
                                                                                s39 = peg$FAILED;
                                                                                if (peg$silentFails === 0) { peg$fail(peg$c262); }
                                                                              }
                                                                              if (s39 !== peg$FAILED) {
                                                                                s22 = [s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, s32, s33, s34, s35, s36, s37, s38, s39];
                                                                                s21 = s22;
                                                                              } else {
                                                                                peg$currPos = s21;
                                                                                s21 = peg$FAILED;
                                                                              }
                                                                            } else {
                                                                              peg$currPos = s21;
                                                                              s21 = peg$FAILED;
                                                                            }
                                                                          } else {
                                                                            peg$currPos = s21;
                                                                            s21 = peg$FAILED;
                                                                          }
                                                                        } else {
                                                                          peg$currPos = s21;
                                                                          s21 = peg$FAILED;
                                                                        }
                                                                      } else {
                                                                        peg$currPos = s21;
                                                                        s21 = peg$FAILED;
                                                                      }
                                                                    } else {
                                                                      peg$currPos = s21;
                                                                      s21 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s21;
                                                                    s21 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s21;
                                                                  s21 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s21;
                                                                s21 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s21;
                                                              s21 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s21;
                                                            s21 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s21;
                                                          s21 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s21;
                                                        s21 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s21;
                                                      s21 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s21;
                                                    s21 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s21;
                                                  s21 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s21;
                                                s21 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s21;
                                              s21 = peg$FAILED;
                                            }
                                            if (s21 === peg$FAILED) {
                                              s21 = null;
                                            }
                                            if (s21 !== peg$FAILED) {
                                              s22 = peg$currPos;
                                              s23 = peg$parse__();
                                              if (s23 !== peg$FAILED) {
                                                s24 = peg$parseTABLESPACE();
                                                if (s24 !== peg$FAILED) {
                                                  s25 = peg$parse__();
                                                  if (s25 !== peg$FAILED) {
                                                    s26 = peg$parseidentifier();
                                                    if (s26 !== peg$FAILED) {
                                                      s23 = [s23, s24, s25, s26];
                                                      s22 = s23;
                                                    } else {
                                                      peg$currPos = s22;
                                                      s22 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s22;
                                                    s22 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s22;
                                                  s22 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s22;
                                                s22 = peg$FAILED;
                                              }
                                              if (s22 === peg$FAILED) {
                                                s22 = null;
                                              }
                                              if (s22 !== peg$FAILED) {
                                                s23 = peg$parse_();
                                                if (s23 !== peg$FAILED) {
                                                  s24 = peg$parsesemicolon();
                                                  if (s24 !== peg$FAILED) {
                                                    s25 = peg$parse_();
                                                    if (s25 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s1 = peg$c375(s8, s12);
                                                      s0 = s1;
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseinteger() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c305.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c306); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c305.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c306); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c376(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetable_properties() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetable_property();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetable_property();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetable_property();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c377(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetable_property() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetable_constraint();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c378(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLIKE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetable_name();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parselike_option();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parselike_option();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c379(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecolumn_name();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsedata_type();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$currPos;
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecolumn_constraint();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecolumn_constraint();
                  if (s7 !== peg$FAILED) {
                    s6 = [s6, s7];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c380(s1, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parsecolumn_constraint() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseCONSTRAINT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseidentifier();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c381(s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseNOT();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseNULL();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c382(s1);
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseNULL();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c383(s1);
        }
        s2 = s3;
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseCHECK();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s5 = peg$c259;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c260); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseexpression();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c261;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c262); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        s11 = peg$parse__();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseNO();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parse__();
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parseINHERIT();
                              if (s14 !== peg$FAILED) {
                                s11 = [s11, s12, s13, s14];
                                s10 = s11;
                              } else {
                                peg$currPos = s10;
                                s10 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c384(s1);
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseDEFAULT();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse__();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsedefault_expr();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c385(s1, s5);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseGENERATED();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse__();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseALWAYS();
                  if (s5 === peg$FAILED) {
                    s5 = peg$currPos;
                    s6 = peg$parseBY();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse__();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseDEFAULT();
                        if (s8 !== peg$FAILED) {
                          s6 = [s6, s7, s8];
                          s5 = s6;
                        } else {
                          peg$currPos = s5;
                          s5 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse__();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$currPos;
                      s8 = peg$parseON();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse__();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parseNULL();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parse__();
                            if (s11 !== peg$FAILED) {
                              s8 = [s8, s9, s10, s11];
                              s7 = s8;
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s7;
                            s7 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                      if (s7 === peg$FAILED) {
                        s7 = null;
                      }
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseAS();
                        if (s8 !== peg$FAILED) {
                          s9 = peg$parse__();
                          if (s9 !== peg$FAILED) {
                            s10 = peg$parseIDENTITY();
                            if (s10 !== peg$FAILED) {
                              peg$savedPos = s2;
                              s3 = peg$c386(s1);
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseUNIQUE();
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  s5 = peg$parse__();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseindex_parameters();
                    if (s6 !== peg$FAILED) {
                      s5 = [s5, s6];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c387(s1);
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parsePRIMARY_KEY();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = peg$parse__();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseindex_parameters();
                      if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    if (s4 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c388(s1);
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parseREFERENCES();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse__();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsetable_name();
                        if (s5 !== peg$FAILED) {
                          s6 = peg$currPos;
                          s7 = peg$parse_();
                          if (s7 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                              s8 = peg$c259;
                              peg$currPos++;
                            } else {
                              s8 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c260); }
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parse_();
                              if (s9 !== peg$FAILED) {
                                s10 = peg$parsecolumn_name();
                                if (s10 !== peg$FAILED) {
                                  s11 = peg$parse_();
                                  if (s11 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                      s12 = peg$c261;
                                      peg$currPos++;
                                    } else {
                                      s12 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c262); }
                                    }
                                    if (s12 !== peg$FAILED) {
                                      peg$savedPos = s6;
                                      s7 = peg$c389(s1, s5, s10);
                                      s6 = s7;
                                    } else {
                                      peg$currPos = s6;
                                      s6 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s6;
                                    s6 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s6;
                                  s6 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s6;
                              s6 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                          if (s6 === peg$FAILED) {
                            s6 = null;
                          }
                          if (s6 !== peg$FAILED) {
                            s7 = peg$currPos;
                            s8 = peg$parse__();
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parseMATCH();
                              if (s9 !== peg$FAILED) {
                                s10 = peg$parse__();
                                if (s10 !== peg$FAILED) {
                                  s11 = peg$parseFULL();
                                  if (s11 !== peg$FAILED) {
                                    s8 = [s8, s9, s10, s11];
                                    s7 = s8;
                                  } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s7;
                                  s7 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s7;
                              s7 = peg$FAILED;
                            }
                            if (s7 === peg$FAILED) {
                              s7 = peg$currPos;
                              s8 = peg$parse__();
                              if (s8 !== peg$FAILED) {
                                s9 = peg$parseMATCH();
                                if (s9 !== peg$FAILED) {
                                  s10 = peg$parse__();
                                  if (s10 !== peg$FAILED) {
                                    s11 = peg$parsePARTIAL();
                                    if (s11 !== peg$FAILED) {
                                      s8 = [s8, s9, s10, s11];
                                      s7 = s8;
                                    } else {
                                      peg$currPos = s7;
                                      s7 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s7;
                                  s7 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                              }
                              if (s7 === peg$FAILED) {
                                s7 = peg$currPos;
                                s8 = peg$parse__();
                                if (s8 !== peg$FAILED) {
                                  s9 = peg$parseMATCH();
                                  if (s9 !== peg$FAILED) {
                                    s10 = peg$parse__();
                                    if (s10 !== peg$FAILED) {
                                      s11 = peg$parseSIMPLE();
                                      if (s11 !== peg$FAILED) {
                                        s8 = [s8, s9, s10, s11];
                                        s7 = s8;
                                      } else {
                                        peg$currPos = s7;
                                        s7 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s7;
                                      s7 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s7;
                                    s7 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s7;
                                  s7 = peg$FAILED;
                                }
                              }
                            }
                            if (s7 === peg$FAILED) {
                              s7 = null;
                            }
                            if (s7 !== peg$FAILED) {
                              s8 = [];
                              s9 = peg$parsefk_action();
                              while (s9 !== peg$FAILED) {
                                s8.push(s9);
                                s9 = peg$parsefk_action();
                              }
                              if (s8 !== peg$FAILED) {
                                peg$savedPos = s2;
                                s3 = peg$c390(s1, s5, s6, s8);
                                s2 = s3;
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c391(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetable_constraint() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseCONSTRAINT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseidentifier();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse__();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s1;
            s2 = peg$c381(s4);
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseCHECK();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s5 = peg$c259;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c260); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexpression();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s9 = peg$c261;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c262); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$currPos;
                    s11 = peg$parse__();
                    if (s11 !== peg$FAILED) {
                      s12 = peg$parseNO();
                      if (s12 !== peg$FAILED) {
                        s13 = peg$parse__();
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parseINHERIT();
                          if (s14 !== peg$FAILED) {
                            s11 = [s11, s12, s13, s14];
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s10;
                      s10 = peg$FAILED;
                    }
                    if (s10 === peg$FAILED) {
                      s10 = null;
                    }
                    if (s10 !== peg$FAILED) {
                      peg$savedPos = s2;
                      s3 = peg$c392(s1);
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseUNIQUE();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s5 = peg$c259;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c260); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsecolumn_names();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s9 = peg$c261;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c262); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$currPos;
                      s11 = peg$parse__();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parseindex_parameters();
                        if (s12 !== peg$FAILED) {
                          s11 = [s11, s12];
                          s10 = s11;
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                      if (s10 === peg$FAILED) {
                        s10 = null;
                      }
                      if (s10 !== peg$FAILED) {
                        peg$savedPos = s2;
                        s3 = peg$c393(s1, s7);
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parsePRIMARY_KEY();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s5 = peg$c259;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c260); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsecolumn_names();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s9 = peg$c261;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c262); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        s11 = peg$parse__();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseindex_parameters();
                          if (s12 !== peg$FAILED) {
                            s11 = [s11, s12];
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c394(s1, s7);
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseFOREIGN_KEY();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 40) {
                  s5 = peg$c259;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c260); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsecolumn_names();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parse_();
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s9 = peg$c261;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c262); }
                        }
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parse_();
                          if (s10 !== peg$FAILED) {
                            s11 = peg$parseREFERENCES();
                            if (s11 !== peg$FAILED) {
                              s12 = peg$parse__();
                              if (s12 !== peg$FAILED) {
                                s13 = peg$parsetable_name();
                                if (s13 !== peg$FAILED) {
                                  s14 = peg$currPos;
                                  s15 = peg$parse_();
                                  if (s15 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 40) {
                                      s16 = peg$c259;
                                      peg$currPos++;
                                    } else {
                                      s16 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c260); }
                                    }
                                    if (s16 !== peg$FAILED) {
                                      s17 = peg$parse_();
                                      if (s17 !== peg$FAILED) {
                                        s18 = peg$parsecolumn_names();
                                        if (s18 !== peg$FAILED) {
                                          s19 = peg$parse_();
                                          if (s19 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                              s20 = peg$c261;
                                              peg$currPos++;
                                            } else {
                                              s20 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c262); }
                                            }
                                            if (s20 !== peg$FAILED) {
                                              peg$savedPos = s14;
                                              s15 = peg$c395(s1, s7, s13, s18);
                                              s14 = s15;
                                            } else {
                                              peg$currPos = s14;
                                              s14 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s14;
                                            s14 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s14;
                                          s14 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s14;
                                        s14 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s14;
                                      s14 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s14;
                                    s14 = peg$FAILED;
                                  }
                                  if (s14 === peg$FAILED) {
                                    s14 = null;
                                  }
                                  if (s14 !== peg$FAILED) {
                                    s15 = [];
                                    s16 = peg$parsefk_action();
                                    while (s16 !== peg$FAILED) {
                                      s15.push(s16);
                                      s16 = peg$parsefk_action();
                                    }
                                    if (s15 !== peg$FAILED) {
                                      peg$savedPos = s2;
                                      s3 = peg$c396(s1, s7, s13, s14, s15);
                                      s2 = s3;
                                    } else {
                                      peg$currPos = s2;
                                      s2 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s2;
                                    s2 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s2;
                                  s2 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s2;
                                s2 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c397(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselike_option() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseINCLUDING();
    if (s1 === peg$FAILED) {
      s1 = peg$parseEXCLUDING();
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCOMMENTS();
        if (s3 === peg$FAILED) {
          s3 = peg$parseCONSTRAINTS();
          if (s3 === peg$FAILED) {
            s3 = peg$parseDEFAULTS();
            if (s3 === peg$FAILED) {
              s3 = peg$parseIDENTITY();
              if (s3 === peg$FAILED) {
                s3 = peg$parseINDEXES();
                if (s3 === peg$FAILED) {
                  s3 = peg$parseSTATISTICS();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parseSTORAGE();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseALL();
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefk_action() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse__();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseON();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseUPDATE();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDELETE();
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsefk_action_options();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c398(s4, s6);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefk_action_options() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c399) {
      s1 = input.substr(peg$currPos, 8);
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c400); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c401) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c402); }
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c137) {
          s2 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c138); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c403) {
              s4 = input.substr(peg$currPos, 6);
              peg$currPos += 6;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c404); }
            }
            if (s4 !== peg$FAILED) {
              s2 = [s2, s3, s4];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c221) {
            s2 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c222); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse__();
            if (s3 !== peg$FAILED) {
              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c139) {
                s4 = input.substr(peg$currPos, 4);
                peg$currPos += 4;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c140); }
              }
              if (s4 !== peg$FAILED) {
                s2 = [s2, s3, s4];
                s1 = s2;
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
          if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c221) {
              s2 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c222); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse__();
              if (s3 !== peg$FAILED) {
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c143) {
                  s4 = input.substr(peg$currPos, 7);
                  peg$currPos += 7;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c144); }
                }
                if (s4 !== peg$FAILED) {
                  s2 = [s2, s3, s4];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s0 = input.substring(s0, peg$currPos);
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parseindex_method() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c113) {
      s1 = input.substr(peg$currPos, 4);
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c114); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c405) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c406); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c407) {
          s1 = input.substr(peg$currPos, 4);
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c408); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c409) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c410); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c411) {
              s1 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c412); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c413) {
                s1 = input.substr(peg$currPos, 7);
                peg$currPos += 7;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c414); }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c415(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseindex_parameters() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseINCLUDES();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s4 = peg$c259;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c260); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsecolumn_names();
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s8 = peg$c261;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c262); }
                }
                if (s8 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6, s7, s8];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parseWITH();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c259;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c260); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsestorage_parameters();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse_();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s8 = peg$c261;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c262); }
                  }
                  if (s8 !== peg$FAILED) {
                    s2 = [s2, s3, s4, s5, s6, s7, s8];
                    s1 = s2;
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parseUSING();
        if (s2 !== peg$FAILED) {
          s3 = peg$parse__();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseINDEX();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseTABLESPACE();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse__();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseidentifier();
                    if (s8 !== peg$FAILED) {
                      s2 = [s2, s3, s4, s5, s6, s7, s8];
                      s1 = s2;
                    } else {
                      peg$currPos = s1;
                      s1 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c416(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsetable_names() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetable_name();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsetable_name();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetable_name();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c377(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseopclasses() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseidentifier();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseidentifier();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c377(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecolumn_names() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsecolumn_name();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsecolumn_name();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsecolumn_name();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c377(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexclude_element_with_operator_list() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseexclude_element_with_operator();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseexclude_element_with_operator();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseexclude_element_with_operator();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c377(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexclude_element_with_operator() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWITH();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseoperator();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestorage_parameters() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsestorage_parameter();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsestorage_parameter();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsestorage_parameter();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsestorage_parameter() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c417) {
      s1 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c418); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 16).toLowerCase() === peg$c419) {
        s1 = input.substr(peg$currPos, 16);
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c420); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 18).toLowerCase() === peg$c421) {
          s1 = input.substr(peg$currPos, 18);
          peg$currPos += 18;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c422); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 24).toLowerCase() === peg$c423) {
            s1 = input.substr(peg$currPos, 24);
            peg$currPos += 24;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c424); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 27).toLowerCase() === peg$c425) {
              s1 = input.substr(peg$currPos, 27);
              peg$currPos += 27;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c426); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 33).toLowerCase() === peg$c427) {
                s1 = input.substr(peg$currPos, 33);
                peg$currPos += 33;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c428); }
              }
              if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 30).toLowerCase() === peg$c429) {
                  s1 = input.substr(peg$currPos, 30);
                  peg$currPos += 30;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c430); }
                }
                if (s1 === peg$FAILED) {
                  if (input.substr(peg$currPos, 36).toLowerCase() === peg$c431) {
                    s1 = input.substr(peg$currPos, 36);
                    peg$currPos += 36;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c432); }
                  }
                  if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 28).toLowerCase() === peg$c433) {
                      s1 = input.substr(peg$currPos, 28);
                      peg$currPos += 28;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c434); }
                    }
                    if (s1 === peg$FAILED) {
                      if (input.substr(peg$currPos, 31).toLowerCase() === peg$c435) {
                        s1 = input.substr(peg$currPos, 31);
                        peg$currPos += 31;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c436); }
                      }
                      if (s1 === peg$FAILED) {
                        if (input.substr(peg$currPos, 28).toLowerCase() === peg$c437) {
                          s1 = input.substr(peg$currPos, 28);
                          peg$currPos += 28;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c438); }
                        }
                        if (s1 === peg$FAILED) {
                          if (input.substr(peg$currPos, 34).toLowerCase() === peg$c439) {
                            s1 = input.substr(peg$currPos, 34);
                            peg$currPos += 34;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c440); }
                          }
                          if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 28).toLowerCase() === peg$c441) {
                              s1 = input.substr(peg$currPos, 28);
                              peg$currPos += 28;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c442); }
                            }
                            if (s1 === peg$FAILED) {
                              if (input.substr(peg$currPos, 34).toLowerCase() === peg$c443) {
                                s1 = input.substr(peg$currPos, 34);
                                peg$currPos += 34;
                              } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c444); }
                              }
                              if (s1 === peg$FAILED) {
                                if (input.substr(peg$currPos, 25).toLowerCase() === peg$c445) {
                                  s1 = input.substr(peg$currPos, 25);
                                  peg$currPos += 25;
                                } else {
                                  s1 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c446); }
                                }
                                if (s1 === peg$FAILED) {
                                  if (input.substr(peg$currPos, 31).toLowerCase() === peg$c447) {
                                    s1 = input.substr(peg$currPos, 31);
                                    peg$currPos += 31;
                                  } else {
                                    s1 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c448); }
                                  }
                                  if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 25).toLowerCase() === peg$c449) {
                                      s1 = input.substr(peg$currPos, 25);
                                      peg$currPos += 25;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c450); }
                                    }
                                    if (s1 === peg$FAILED) {
                                      if (input.substr(peg$currPos, 31).toLowerCase() === peg$c451) {
                                        s1 = input.substr(peg$currPos, 31);
                                        peg$currPos += 31;
                                      } else {
                                        s1 = peg$FAILED;
                                        if (peg$silentFails === 0) { peg$fail(peg$c452); }
                                      }
                                      if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 27).toLowerCase() === peg$c453) {
                                          s1 = input.substr(peg$currPos, 27);
                                          peg$currPos += 27;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c454); }
                                        }
                                        if (s1 === peg$FAILED) {
                                          if (input.substr(peg$currPos, 33).toLowerCase() === peg$c455) {
                                            s1 = input.substr(peg$currPos, 33);
                                            peg$currPos += 33;
                                          } else {
                                            s1 = peg$FAILED;
                                            if (peg$silentFails === 0) { peg$fail(peg$c456); }
                                          }
                                          if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 35).toLowerCase() === peg$c457) {
                                              s1 = input.substr(peg$currPos, 35);
                                              peg$currPos += 35;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c458); }
                                            }
                                            if (s1 === peg$FAILED) {
                                              if (input.substr(peg$currPos, 41).toLowerCase() === peg$c459) {
                                                s1 = input.substr(peg$currPos, 41);
                                                peg$currPos += 41;
                                              } else {
                                                s1 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c460); }
                                              }
                                              if (s1 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 35).toLowerCase() === peg$c461) {
                                                  s1 = input.substr(peg$currPos, 35);
                                                  peg$currPos += 35;
                                                } else {
                                                  s1 = peg$FAILED;
                                                  if (peg$silentFails === 0) { peg$fail(peg$c462); }
                                                }
                                                if (s1 === peg$FAILED) {
                                                  if (input.substr(peg$currPos, 41).toLowerCase() === peg$c463) {
                                                    s1 = input.substr(peg$currPos, 41);
                                                    peg$currPos += 41;
                                                  } else {
                                                    s1 = peg$FAILED;
                                                    if (peg$silentFails === 0) { peg$fail(peg$c464); }
                                                  }
                                                  if (s1 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 37).toLowerCase() === peg$c465) {
                                                      s1 = input.substr(peg$currPos, 37);
                                                      peg$currPos += 37;
                                                    } else {
                                                      s1 = peg$FAILED;
                                                      if (peg$silentFails === 0) { peg$fail(peg$c466); }
                                                    }
                                                    if (s1 === peg$FAILED) {
                                                      if (input.substr(peg$currPos, 43).toLowerCase() === peg$c467) {
                                                        s1 = input.substr(peg$currPos, 43);
                                                        peg$currPos += 43;
                                                      } else {
                                                        s1 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c468); }
                                                      }
                                                      if (s1 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 27).toLowerCase() === peg$c469) {
                                                          s1 = input.substr(peg$currPos, 27);
                                                          peg$currPos += 27;
                                                        } else {
                                                          s1 = peg$FAILED;
                                                          if (peg$silentFails === 0) { peg$fail(peg$c470); }
                                                        }
                                                        if (s1 === peg$FAILED) {
                                                          if (input.substr(peg$currPos, 33).toLowerCase() === peg$c471) {
                                                            s1 = input.substr(peg$currPos, 33);
                                                            peg$currPos += 33;
                                                          } else {
                                                            s1 = peg$FAILED;
                                                            if (peg$silentFails === 0) { peg$fail(peg$c472); }
                                                          }
                                                          if (s1 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 18).toLowerCase() === peg$c473) {
                                                              s1 = input.substr(peg$currPos, 18);
                                                              peg$currPos += 18;
                                                            } else {
                                                              s1 = peg$FAILED;
                                                              if (peg$silentFails === 0) { peg$fail(peg$c474); }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c373;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c374); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseexpression();
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecreate_table() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsecreate_table_normal();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c475(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsealter_table() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsealter_table_action();
    if (s1 === peg$FAILED) {
      s1 = peg$parsealter_table_rename();
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c476(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsealter_table_rename() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseALTER();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseTABLE();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIF_EXISTS();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetable_name();
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parse_();
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 42) {
                      s10 = peg$c477;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c478); }
                    }
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseRENAME();
                      if (s10 !== peg$FAILED) {
                        s11 = [];
                        s12 = peg$parsecmt();
                        if (s12 === peg$FAILED) {
                          s12 = peg$currPos;
                          s13 = peg$currPos;
                          peg$silentFails++;
                          s14 = peg$parsesemicolon();
                          peg$silentFails--;
                          if (s14 === peg$FAILED) {
                            s13 = void 0;
                          } else {
                            peg$currPos = s13;
                            s13 = peg$FAILED;
                          }
                          if (s13 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                              s14 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s14 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c267); }
                            }
                            if (s14 !== peg$FAILED) {
                              s13 = [s13, s14];
                              s12 = s13;
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        }
                        while (s12 !== peg$FAILED) {
                          s11.push(s12);
                          s12 = peg$parsecmt();
                          if (s12 === peg$FAILED) {
                            s12 = peg$currPos;
                            s13 = peg$currPos;
                            peg$silentFails++;
                            s14 = peg$parsesemicolon();
                            peg$silentFails--;
                            if (s14 === peg$FAILED) {
                              s13 = void 0;
                            } else {
                              peg$currPos = s13;
                              s13 = peg$FAILED;
                            }
                            if (s13 !== peg$FAILED) {
                              if (input.length > peg$currPos) {
                                s14 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s14 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c267); }
                              }
                              if (s14 !== peg$FAILED) {
                                s13 = [s13, s14];
                                s12 = s13;
                              } else {
                                peg$currPos = s12;
                                s12 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          }
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parse_();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parsesemicolon();
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parse_();
                              if (s14 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c479();
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealter_table_action() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseALTER();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseTABLE();
          if (s4 !== peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parse__();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseIF_EXISTS();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse__();
              if (s6 !== peg$FAILED) {
                s7 = peg$parsetable_name();
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parse_();
                  if (s9 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 42) {
                      s10 = peg$c477;
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c478); }
                    }
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseactions();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsesemicolon();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parse_();
                            if (s13 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c480(s7, s10);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseactions() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseaction();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseaction();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseaction();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c377(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseaction() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parseADD();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsetable_constraint();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c481(s3);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseALTER();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseCOLUMN();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsecolumn_name();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                s7 = peg$parseSET();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parse__();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseDATA();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse__();
                      if (s10 !== peg$FAILED) {
                        s7 = [s7, s8, s9, s10];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseTYPE();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse__();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsedata_type();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        s11 = peg$parse__();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parseUSING();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parsealter_expression();
                            if (s13 !== peg$FAILED) {
                              peg$savedPos = s10;
                              s11 = peg$c482(s4, s9, s13);
                              s10 = s11;
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c483(s4, s9, s10);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseALTER();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse__();
          if (s2 !== peg$FAILED) {
            s3 = peg$currPos;
            s4 = peg$parseCOLUMN();
            if (s4 !== peg$FAILED) {
              s5 = peg$parse__();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = null;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parsecolumn_name();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse__();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parseSET();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parse__();
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseDEFAULT();
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse__();
                        if (s9 !== peg$FAILED) {
                          s10 = peg$parsealter_expression();
                          if (s10 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c484(s4, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseALTER();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse__();
            if (s2 !== peg$FAILED) {
              s3 = peg$currPos;
              s4 = peg$parseCOLUMN();
              if (s4 !== peg$FAILED) {
                s5 = peg$parse__();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
              if (s3 === peg$FAILED) {
                s3 = null;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsecolumn_name();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse__();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseDROP();
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse__();
                      if (s7 !== peg$FAILED) {
                        s8 = peg$parseDEFAULT();
                        if (s8 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c485(s4);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseALTER();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse__();
              if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parseCOLUMN();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parse__();
                  if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                  s3 = null;
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parsecolumn_name();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse__();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseSET();
                      if (s6 === peg$FAILED) {
                        s6 = peg$parseDROP();
                      }
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parse__();
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseNOT();
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parse__();
                            if (s9 !== peg$FAILED) {
                              s10 = peg$parseNULL();
                              if (s10 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c486(s4, s6);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseALTER();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse__();
                if (s2 !== peg$FAILED) {
                  s3 = peg$currPos;
                  s4 = peg$parseCOLUMN();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parse__();
                    if (s5 !== peg$FAILED) {
                      s4 = [s4, s5];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 === peg$FAILED) {
                    s3 = null;
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parsecolumn_name();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parse__();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$parseSET();
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parse_();
                          if (s7 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                              s8 = peg$c259;
                              peg$currPos++;
                            } else {
                              s8 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c260); }
                            }
                            if (s8 !== peg$FAILED) {
                              s9 = peg$parse_();
                              if (s9 !== peg$FAILED) {
                                s10 = peg$parseset_attribute_options();
                                if (s10 !== peg$FAILED) {
                                  s11 = peg$parse_();
                                  if (s11 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                      s12 = peg$c261;
                                      peg$currPos++;
                                    } else {
                                      s12 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c262); }
                                    }
                                    if (s12 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s1 = peg$c487(s4);
                                      s0 = s1;
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = [];
                s2 = peg$parsecmt();
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$currPos;
                  peg$silentFails++;
                  s4 = peg$parsesemicolon();
                  peg$silentFails--;
                  if (s4 === peg$FAILED) {
                    s3 = void 0;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                  if (s3 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                      s4 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c267); }
                    }
                    if (s4 !== peg$FAILED) {
                      s3 = [s3, s4];
                      s2 = s3;
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                }
                while (s2 !== peg$FAILED) {
                  s1.push(s2);
                  s2 = peg$parsecmt();
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$currPos;
                    peg$silentFails++;
                    s4 = peg$parsesemicolon();
                    peg$silentFails--;
                    if (s4 === peg$FAILED) {
                      s3 = void 0;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                      if (input.length > peg$currPos) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c267); }
                      }
                      if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c488();
                }
                s0 = s1;
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseset_attribute_options() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseset_attribute_option();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseset_attribute_option();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseset_attribute_option();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c377(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseset_attribute_option() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s3 = peg$c373;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c374); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseexpression();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsereset_attribute_options() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseidentifier();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsecomma();
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseidentifier();
            if (s6 !== peg$FAILED) {
              s3 = [s3, s4, s5, s6];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c377(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsealter_expression() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$c489.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c490); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$c489.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c490); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c491(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsecreate_index() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCREATE();
      if (s2 !== peg$FAILED) {
        s3 = peg$currPos;
        s4 = peg$parse__();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseUNIQUE();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse__();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseINDEX();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parse__();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseIF_NOT_EXISTS();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$currPos;
                s8 = peg$parse__();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseON();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s8 = peg$c492(s3);
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                if (s7 === peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = peg$parse__();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseidentifier();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parse__();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseON();
                        if (s11 !== peg$FAILED) {
                          peg$savedPos = s7;
                          s8 = peg$c493(s3, s9);
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$currPos;
                  s9 = peg$parse__();
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseONLY();
                    if (s10 !== peg$FAILED) {
                      s9 = [s9, s10];
                      s8 = s9;
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s8;
                    s8 = peg$FAILED;
                  }
                  if (s8 === peg$FAILED) {
                    s8 = null;
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsetable_name();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$currPos;
                        s12 = peg$parse__();
                        if (s12 !== peg$FAILED) {
                          s13 = peg$parseUSING();
                          if (s13 !== peg$FAILED) {
                            s14 = peg$parse__();
                            if (s14 !== peg$FAILED) {
                              s15 = peg$parseindex_method();
                              if (s15 !== peg$FAILED) {
                                peg$savedPos = s11;
                                s12 = peg$c494(s3, s7, s10, s15);
                                s11 = s12;
                              } else {
                                peg$currPos = s11;
                                s11 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s11;
                              s11 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s11;
                            s11 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s11;
                          s11 = peg$FAILED;
                        }
                        if (s11 === peg$FAILED) {
                          s11 = null;
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parse_();
                          if (s12 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 40) {
                              s13 = peg$c259;
                              peg$currPos++;
                            } else {
                              s13 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c260); }
                            }
                            if (s13 !== peg$FAILED) {
                              s14 = peg$parse_();
                              if (s14 !== peg$FAILED) {
                                s15 = peg$parseindex_properties();
                                if (s15 !== peg$FAILED) {
                                  s16 = peg$parse_();
                                  if (s16 !== peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 41) {
                                      s17 = peg$c261;
                                      peg$currPos++;
                                    } else {
                                      s17 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c262); }
                                    }
                                    if (s17 !== peg$FAILED) {
                                      s18 = peg$currPos;
                                      s19 = peg$parse__();
                                      if (s19 !== peg$FAILED) {
                                        s20 = peg$parseTABLESPACE();
                                        if (s20 !== peg$FAILED) {
                                          s21 = peg$parse__();
                                          if (s21 !== peg$FAILED) {
                                            s22 = peg$parseidentifier();
                                            if (s22 !== peg$FAILED) {
                                              s19 = [s19, s20, s21, s22];
                                              s18 = s19;
                                            } else {
                                              peg$currPos = s18;
                                              s18 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s18;
                                            s18 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s18;
                                          s18 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s18;
                                        s18 = peg$FAILED;
                                      }
                                      if (s18 === peg$FAILED) {
                                        s18 = null;
                                      }
                                      if (s18 !== peg$FAILED) {
                                        s19 = peg$currPos;
                                        s20 = peg$parse__();
                                        if (s20 !== peg$FAILED) {
                                          s21 = peg$parseWHERE();
                                          if (s21 !== peg$FAILED) {
                                            s22 = peg$parse_();
                                            if (s22 !== peg$FAILED) {
                                              if (input.charCodeAt(peg$currPos) === 40) {
                                                s23 = peg$c259;
                                                peg$currPos++;
                                              } else {
                                                s23 = peg$FAILED;
                                                if (peg$silentFails === 0) { peg$fail(peg$c260); }
                                              }
                                              if (s23 !== peg$FAILED) {
                                                s24 = peg$parse_();
                                                if (s24 !== peg$FAILED) {
                                                  s25 = peg$parseexpression();
                                                  if (s25 !== peg$FAILED) {
                                                    s26 = peg$parse_();
                                                    if (s26 !== peg$FAILED) {
                                                      if (input.charCodeAt(peg$currPos) === 41) {
                                                        s27 = peg$c261;
                                                        peg$currPos++;
                                                      } else {
                                                        s27 = peg$FAILED;
                                                        if (peg$silentFails === 0) { peg$fail(peg$c262); }
                                                      }
                                                      if (s27 !== peg$FAILED) {
                                                        s20 = [s20, s21, s22, s23, s24, s25, s26, s27];
                                                        s19 = s20;
                                                      } else {
                                                        peg$currPos = s19;
                                                        s19 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s19;
                                                      s19 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s19;
                                                    s19 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s19;
                                                  s19 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s19;
                                                s19 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s19;
                                              s19 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s19;
                                            s19 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s19;
                                          s19 = peg$FAILED;
                                        }
                                        if (s19 === peg$FAILED) {
                                          s19 = null;
                                        }
                                        if (s19 !== peg$FAILED) {
                                          s20 = peg$parse_();
                                          if (s20 !== peg$FAILED) {
                                            s21 = peg$parsesemicolon();
                                            if (s21 !== peg$FAILED) {
                                              s22 = peg$parse_();
                                              if (s22 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c495(s3, s7, s10, s11, s15);
                                                s0 = s1;
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseindex_properties() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parseindex_property();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseindex_property();
            if (s7 !== peg$FAILED) {
              s4 = [s4, s5, s6, s7];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseindex_property();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c496(s1, s2);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseindex_property() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsecolumn_name();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s1;
      s2 = peg$c497(s2);
    }
    s1 = s2;
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parseexpression();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c498(s2);
      }
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parse__();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c499) {
          s4 = peg$c499;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c500); }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c501) {
            s4 = peg$c501;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c502); }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c503(s1);
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseindex_storage_parameters() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseindex_storage_parameter();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s4 = peg$c373;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c374); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseexpression();
            if (s6 !== peg$FAILED) {
              s2 = [s2, s3, s4, s5, s6];
              s1 = s2;
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parse_();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          if (s6 !== peg$FAILED) {
            s7 = peg$parseindex_storage_parameter();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s9 = peg$c373;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c374); }
                }
                if (s9 !== peg$FAILED) {
                  s10 = peg$parseexpression();
                  if (s10 !== peg$FAILED) {
                    s4 = [s4, s5, s6, s7, s8, s9, s10];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parse_();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseindex_storage_parameter();
              if (s7 !== peg$FAILED) {
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s9 = peg$c373;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c374); }
                  }
                  if (s9 !== peg$FAILED) {
                    s10 = peg$parseexpression();
                    if (s10 !== peg$FAILED) {
                      s4 = [s4, s5, s6, s7, s8, s9, s10];
                      s3 = s4;
                    } else {
                      peg$currPos = s3;
                      s3 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseindex_storage_parameter() {
    var s0;

    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c417) {
      s0 = input.substr(peg$currPos, 10);
      peg$currPos += 10;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$c418); }
    }

    return s0;
  }

  function peg$parsecomment() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCOMMENT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse__();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseON();
          if (s4 !== peg$FAILED) {
            s5 = peg$parse__();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecomment_option();
              if (s6 !== peg$FAILED) {
                s7 = peg$parse__();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseIS();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parse__();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsestring_constant();
                      if (s10 === peg$FAILED) {
                        s10 = peg$parseNULL();
                      }
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parse_();
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsesemicolon();
                          if (s12 !== peg$FAILED) {
                            s13 = peg$parse_();
                            if (s13 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s1 = peg$c504(s6, s10);
                              s0 = s1;
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecomment_option() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseCOLUMN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parse__();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parseidentifier();
        if (s5 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s6 = peg$c274;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c275); }
          }
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseidentifier();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s6 = peg$c274;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c275); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsecolumn_name();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c505(s3, s4);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTABLE();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse__();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetable_name();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c506(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseignore_syntax() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseINSERT();
      if (s3 !== peg$FAILED) {
        s4 = [];
        if (peg$c507.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c508); }
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          if (peg$c507.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c508); }
          }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s3 = peg$c509();
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parseSET();
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c507.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c508); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c507.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c508); }
            }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2;
            s3 = peg$c510();
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          s3 = peg$parseRESET();
          if (s3 !== peg$FAILED) {
            s4 = [];
            if (peg$c507.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c508); }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c507.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c508); }
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c511();
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            s3 = peg$parseSELECT();
            if (s3 !== peg$FAILED) {
              s4 = [];
              if (peg$c507.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c508); }
              }
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                if (peg$c507.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c508); }
                }
              }
              if (s4 !== peg$FAILED) {
                peg$savedPos = s2;
                s3 = peg$c512();
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = peg$parseDROP();
              if (s3 !== peg$FAILED) {
                s4 = [];
                if (peg$c507.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c508); }
                }
                while (s5 !== peg$FAILED) {
                  s4.push(s5);
                  if (peg$c507.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c508); }
                  }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c513();
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$currPos;
                s3 = peg$parseUSE();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  if (peg$c507.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c508); }
                  }
                  while (s5 !== peg$FAILED) {
                    s4.push(s5);
                    if (peg$c507.test(input.charAt(peg$currPos))) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c508); }
                    }
                  }
                  if (s4 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c514();
                    s2 = s3;
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
                if (s2 === peg$FAILED) {
                  s2 = peg$currPos;
                  s3 = peg$parseCREATE();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse__();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseSEQUENCE();
                      if (s5 !== peg$FAILED) {
                        s6 = [];
                        if (peg$c507.test(input.charAt(peg$currPos))) {
                          s7 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c508); }
                        }
                        while (s7 !== peg$FAILED) {
                          s6.push(s7);
                          if (peg$c507.test(input.charAt(peg$currPos))) {
                            s7 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c508); }
                          }
                        }
                        if (s6 !== peg$FAILED) {
                          peg$savedPos = s2;
                          s3 = peg$c515();
                          s2 = s3;
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                  }
                  if (s2 === peg$FAILED) {
                    s2 = peg$currPos;
                    s3 = peg$parseCREATE();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse__();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseSCHEMA();
                        if (s5 !== peg$FAILED) {
                          s6 = [];
                          if (peg$c507.test(input.charAt(peg$currPos))) {
                            s7 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$c508); }
                          }
                          while (s7 !== peg$FAILED) {
                            s6.push(s7);
                            if (peg$c507.test(input.charAt(peg$currPos))) {
                              s7 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c508); }
                            }
                          }
                          if (s6 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c516();
                            s2 = s3;
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s2;
                      s2 = peg$FAILED;
                    }
                    if (s2 === peg$FAILED) {
                      s2 = peg$currPos;
                      s3 = peg$parseCREATE();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parse__();
                        if (s4 !== peg$FAILED) {
                          s5 = peg$parseVIEW();
                          if (s5 !== peg$FAILED) {
                            s6 = [];
                            if (peg$c507.test(input.charAt(peg$currPos))) {
                              s7 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$c508); }
                            }
                            while (s7 !== peg$FAILED) {
                              s6.push(s7);
                              if (peg$c507.test(input.charAt(peg$currPos))) {
                                s7 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c508); }
                              }
                            }
                            if (s6 !== peg$FAILED) {
                              peg$savedPos = s2;
                              s3 = peg$c517();
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                      }
                      if (s2 === peg$FAILED) {
                        s2 = peg$currPos;
                        s3 = peg$parseALTER();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parse__();
                          if (s4 !== peg$FAILED) {
                            s5 = [];
                            s6 = peg$parsecmt();
                            if (s6 === peg$FAILED) {
                              s6 = peg$currPos;
                              s7 = peg$currPos;
                              peg$silentFails++;
                              s8 = peg$parsesemicolon();
                              peg$silentFails--;
                              if (s8 === peg$FAILED) {
                                s7 = void 0;
                              } else {
                                peg$currPos = s7;
                                s7 = peg$FAILED;
                              }
                              if (s7 !== peg$FAILED) {
                                if (input.length > peg$currPos) {
                                  s8 = input.charAt(peg$currPos);
                                  peg$currPos++;
                                } else {
                                  s8 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$c267); }
                                }
                                if (s8 !== peg$FAILED) {
                                  s7 = [s7, s8];
                                  s6 = s7;
                                } else {
                                  peg$currPos = s6;
                                  s6 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                              }
                            }
                            while (s6 !== peg$FAILED) {
                              s5.push(s6);
                              s6 = peg$parsecmt();
                              if (s6 === peg$FAILED) {
                                s6 = peg$currPos;
                                s7 = peg$currPos;
                                peg$silentFails++;
                                s8 = peg$parsesemicolon();
                                peg$silentFails--;
                                if (s8 === peg$FAILED) {
                                  s7 = void 0;
                                } else {
                                  peg$currPos = s7;
                                  s7 = peg$FAILED;
                                }
                                if (s7 !== peg$FAILED) {
                                  if (input.length > peg$currPos) {
                                    s8 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                  } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c267); }
                                  }
                                  if (s8 !== peg$FAILED) {
                                    s7 = [s7, s8];
                                    s6 = s7;
                                  } else {
                                    peg$currPos = s6;
                                    s6 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s6;
                                  s6 = peg$FAILED;
                                }
                              }
                            }
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s2;
                              s3 = peg$c518();
                              s2 = s3;
                            } else {
                              peg$currPos = s2;
                              s2 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s2;
                            s2 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s2;
                          s2 = peg$FAILED;
                        }
                        if (s2 === peg$FAILED) {
                          s2 = peg$currPos;
                          s3 = peg$parse__();
                          if (s3 !== peg$FAILED) {
                            peg$savedPos = s2;
                            s3 = peg$c519();
                          }
                          s2 = s3;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsesemicolon();
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c520(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecommand() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsecreate_table();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$c521(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsealter_table();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c522(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsecreate_index();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c523(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsecomment();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c524(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseignore_syntax();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c525(s1);
            }
            s0 = s1;
          }
        }
      }
    }

    return s0;
  }



  	const tables = [];
  	const refs = [];
  	const enums = [];
  	const warnings = [];


    // intput:
    // `
    //      'created'
    //                   ,
    //         'pending',          'done'
    //  `
    //  => `'created', 'pending', 'done'`
    const removeReduntdantSpNewline = (str) => {
      const arr = str.split(/[\s\r\n]*,[\s\r\n]*/);
      // need to trim spaces and newlines of the first and last element
      const arrAfterTrim = arr.map(ele => {
        return ele.replace(/^[\s]+|[\s]+$|[\r\n]|\s(?=\s)/g, '');
      });
      return arrAfterTrim.join(', ');
    }

    // TODO: support configurable default schema name other than 'public'
    const findTable = (schemaName, tableName) => {
      const realSchemaName = schemaName || 'public';
      const table = tables.find(table => {
        const targetSchemaName = table.schemaName || 'public';
        return targetSchemaName === realSchemaName && table.name === tableName;
      });
      return table;
    };

    const findField = (table, fieldName) => table.fields.find(field => field.name === fieldName);



  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
